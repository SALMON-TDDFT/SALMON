C
C  Copyright 2018 SALMON developers
C
C  Licensed under the Apache License, Version 2.0 (the "License");
C  you may not use this file except in compliance with the License.
C  You may obtain a copy of the License at
C
C      http://www.apache.org/licenses/LICENSE-2.0
C
C  Unless required by applicable law or agreed to in writing, software
C  distributed under the License is distributed on an "AS IS" BASIS,
C  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
C  See the License for the specific language governing permissions and
C  limitations under the License.
C
C======================================================================
C======================================================================
C
C     FFTE: A FAST FOURIER TRANSFORM PACKAGE
C
C     (C) COPYRIGHT SOFTWARE, 2000-2004, 2008-2014, ALL RIGHTS RESERVED
C                BY
C         DAISUKE TAKAHASHI
C         FACULTY OF ENGINEERING, INFORMATION AND SYSTEMS
C         UNIVERSITY OF TSUKUBA
C         1-1-1 TENNODAI, TSUKUBA, IBARAKI 305-8573, JAPAN
C         E-MAIL: daisuke@cs.tsukuba.ac.jp
C
C
C     PARALLEL 3-D COMPLEX FFT ROUTINE (WITH 2-D DECOMPOSITION)
C
C     FORTRAN77 + MPI SOURCE PROGRAM
C
C     CALL PZFFT3DV_MOD(A,B,NX,NY,NZ,NPUY,NPUZ,IOPT)
C            !!!!!!!!!!!!!!!!!ATTENTION!!!!!!!!!!!!!!!!! ! noda
C            ! Functions for ICOMMY and ICOMMZ are     ! ! noda
C            ! replaced to subroutines.                ! ! noda
C            !!!!!!!!!!!!!!!!!ATTENTION!!!!!!!!!!!!!!!!! ! noda
C
C     NX IS THE LENGTH OF THE TRANSFORMS IN THE X-DIRECTION (INTEGER*4)
C     NY IS THE LENGTH OF THE TRANSFORMS IN THE Y-DIRECTION (INTEGER*4)
C     NZ IS THE LENGTH OF THE TRANSFORMS IN THE Z-DIRECTION (INTEGER*4)
C       ------------------------------------
C         NX = (2**IP) * (3**IQ) * (5**IR)
C         NY = (2**JP) * (3**JQ) * (5**JR)
C         NZ = (2**KP) * (3**KQ) * (5**KR)
C       ------------------------------------
C     NPUY IS THE NUMBER OF PROCESSORS IN THE Y-DIRECTION (INTEGER*4)
C     NPUZ IS THE NUMBER OF PROCESSORS IN THE Z-DIRECTION (INTEGER*4)
C     IOPT = 0 FOR INITIALIZING THE COEFFICIENTS (INTEGER*4)
C     IOPT = -1 FOR FORWARD TRANSFORM WHERE
C              A(NX,NY/NPUY,NZ/NPUZ) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,BLOCK,BLOCK)
C              B(NX,NY/NPUY,NZ/NPUZ) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,BLOCK,BLOCK)
C     IOPT = +1 FOR INVERSE TRANSFORM WHERE
C              A(NX,NY/NPUY,NZ/NPUZ) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,BLOCK,BLOCK)
C              B(NX,NY/NPUY,NZ/NPUZ) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,BLOCK,BLOCK)
C     IOPT = -2 FOR FORWARD TRANSFORM WHERE
C              A(NX,NY/NPUY,NZ/NPUZ) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(*,BLOCK,BLOCK)
C              B(NX/NPUY,NY/NPUZ,NZ) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(BLOCK,BLOCK,*)
C     IOPT = +2 FOR INVERSE TRANSFORM WHERE
C              A(NX/NPUY,NY/NPUZ,NZ) IS COMPLEX INPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE A(BLOCK,BLOCK,*)
C              B(NX,NY/NPUY,NZ/NPUZ) IS COMPLEX OUTPUT VECTOR (COMPLEX*16)
C!HPF$ DISTRIBUTE B(*,BLOCK,BLOCK)
C
C     WRITTEN BY DAISUKE TAKAHASHI
C
      SUBROUTINE PZFFT3DV_MOD(A,B,NX,NY,NZ,NPUY,NPUZ,IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
! Parameters written in param.h !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      PARAMETER (MAXNPU=65536)
      PARAMETER (NDA2=65536)
      PARAMETER (NDA3=4096)
      PARAMETER (NBLK=16)
      PARAMETER (NP=8)
      PARAMETER (L2SIZE=2097152)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      COMPLEX*16 A(*),B(*)
      COMPLEX*16 C(NDA3)
      COMPLEX*16 WX(NDA3),WY(NDA3),WZ(NDA3)
      DIMENSION LNX(3),LNY(3),LNZ(3)
      SAVE WX,WY,WZ
C
      NN=NX*(NY/NPUY)*(NZ/NPUZ)
C
      CALL FACTOR(NX,LNX)
      CALL FACTOR(NY,LNY)
      CALL FACTOR(NZ,LNZ)
C
      IF (IOPT .EQ. 0) THEN
        CALL SETTBL(WX,NX)
        CALL SETTBL(WY,NY)
        CALL SETTBL(WZ,NZ)
        RETURN
      END IF
C
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
!$OMP PARALLEL DO
!DIR$ VECTOR ALIGNED
        DO 10 I=1,NN
          A(I)=DCONJG(A(I))
   10   CONTINUE
      END IF
C
      IF (IOPT .EQ. -1 .OR. IOPT .EQ. -2) THEN
!$OMP PARALLEL PRIVATE(C)
        CALL PZFFT3DVF(A,A,A,A,A,A,A,B,B,B,B,B,B,B,C,WX,WY,WZ,NX,NY,NZ,
     1                 LNX,LNY,LNZ,NPUY,NPUZ,IOPT)
!$OMP END PARALLEL
      ELSE
!$OMP PARALLEL PRIVATE(C)
        CALL PZFFT3DVB(A,A,A,A,A,A,A,B,B,B,B,B,B,B,C,WX,WY,WZ,NX,NY,NZ,
     1                 LNX,LNY,LNZ,NPUY,NPUZ,IOPT)
!$OMP END PARALLEL
      END IF
C
      IF (IOPT .EQ. 1 .OR. IOPT .EQ. 2) THEN
        DN=1.0D0/(DBLE(NX)*DBLE(NY)*DBLE(NZ))
!$OMP PARALLEL DO
!DIR$ VECTOR ALIGNED
        DO 20 I=1,NN
          B(I)=DCONJG(B(I))*DN
   20   CONTINUE
      END IF
      RETURN
      END
      SUBROUTINE PZFFT3DVF(A,AXYZP,AXZYP,AYZXP,AZPXY,AZXY,AZXY2,B,BXPYZ,
     1                     BXZYP,BYPZX,BYZX,BYZX2,BZXYP,C,WX,WY,WZ,
     2                     NX,NY,NZ,LNX,LNY,LNZ,NPUY,NPUZ,
     3                     IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
! Parameters written in param.h !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      PARAMETER (MAXNPU=65536)
      PARAMETER (NDA2=65536)
      PARAMETER (NDA3=4096)
      PARAMETER (NBLK=16)
      PARAMETER (NP=8)
      PARAMETER (L2SIZE=2097152)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      COMPLEX*16 A(NX,*),AXYZP(NX/NPUY,NY/NPUZ,NZ/NPUZ,*),
     1           AXZYP(NX/NPUY,NZ/NPUZ,NY/NPUY,*),
     2           AYZXP(NY/NPUY,(NZ/NPUZ)*(NX/NPUY),*),
     3           AZPXY(NZ/NPUZ,NPUZ,*),AZXY(NZ,*),
     4           AZXY2((NZ/NPUZ)*(NX/NPUY),*)
      COMPLEX*16 B((NX/NPUY)*(NY/NPUZ),*),BXPYZ(NX/NPUY,NPUY,NY/NPUY,*),
     1           BXZYP(NX/NPUY,NZ/NPUZ,NY/NPUZ,*),BYPZX(NY/NPUY,NPUY,*),
     2           BYZX(NY,*),BYZX2((NY/NPUY)*(NZ/NPUZ),*),
     3           BZXYP(NZ/NPUZ,(NX/NPUY)*(NY/NPUZ),*)
      COMPLEX*16 C(*)
      COMPLEX*16 WX(*),WY(*),WZ(*)
      DIMENSION LNX(*),LNY(*),LNZ(*)
C
      NNXY=NX/NPUY
      NNYY=NY/NPUY
      NNYZ=NY/NPUZ
      NNZZ=NZ/NPUZ
      NN=NX*NNYY*NNZZ
C
!$OMP DO
      DO 40 JJ=1,NNYY*NNZZ,NBLK
        DO 10 J=JJ,MIN0(JJ+NBLK-1,NNYY*NNZZ)
          CALL FFT235(A(1,J),C,WX,NX,LNX)
   10   CONTINUE
        DO 30 I=1,NX
!DIR$ VECTOR ALIGNED
          DO 20 J=JJ,MIN0(JJ+NBLK-1,NNYY*NNZZ)
            BYZX2(J,I)=A(I,J)
   20     CONTINUE
   30   CONTINUE
   40 CONTINUE
!$OMP BARRIER
!$OMP MASTER
C      CALL MPI_ALLTOALL(BYZX2,NN/NPUY,MPI_DOUBLE_COMPLEX,AYZXP,NN/NPUY,
C     1                  MPI_DOUBLE_COMPLEX,ICOMMY,IERR)
      CALL CONVERT_1D_Y(BYZX2,AYZXP,NN,NPUY)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 70 K=1,NNZZ*NNXY
        DO 60 L=1,NPUY
!DIR$ VECTOR ALIGNED
          DO 50 J=1,NNYY
            BYPZX(J,L,K)=AYZXP(J,K,L)
   50     CONTINUE
   60   CONTINUE
   70 CONTINUE
!$OMP DO
      DO 110 KK=1,NNZZ*NNXY,NBLK
        DO 80 K=KK,MIN0(KK+NBLK-1,NNZZ*NNXY)
          CALL FFT235(BYZX(1,K),C,WY,NY,LNY)
   80   CONTINUE
        DO 100 J=1,NY
!DIR$ VECTOR ALIGNED
          DO 90 K=KK,MIN0(KK+NBLK-1,NNZZ*NNXY)
            AZXY2(K,J)=BYZX(J,K)
   90     CONTINUE
  100   CONTINUE
  110 CONTINUE
!$OMP BARRIER
!$OMP MASTER
C      CALL MPI_ALLTOALL(AZXY2,NN/NPUZ,MPI_DOUBLE_COMPLEX,BZXYP,
C     1                  NN/NPUZ,MPI_DOUBLE_COMPLEX,ICOMMZ,IERR)
      CALL CONVERT_1D_Z(AZXY2,BZXYP,NN,NPUZ)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 140 I=1,NNXY*NNYZ
        DO 130 L=1,NPUZ
!DIR$ VECTOR ALIGNED
          DO 120 K=1,NNZZ
            AZPXY(K,L,I)=BZXYP(K,I,L)
  120     CONTINUE
  130   CONTINUE
        CALL FFT235(AZPXY(1,1,I),C,WZ,NZ,LNZ)
  140 CONTINUE
!$OMP DO
      DO 180 JJ=1,NZ,NBLK
        DO 170 II=1,NNXY*NNYZ,NBLK
          DO 160 J=JJ,MIN0(JJ+NBLK-1,NZ)
!DIR$ VECTOR ALIGNED
            DO 150 I=II,MIN0(II+NBLK-1,NNXY*NNYZ)
              B(I,J)=AZXY(J,I)
  150       CONTINUE
  160     CONTINUE
  170   CONTINUE
  180 CONTINUE
      IF (IOPT .EQ. -2) RETURN
!$OMP BARRIER
!$OMP MASTER
C      CALL MPI_ALLTOALL(B,NN/NPUZ,MPI_DOUBLE_COMPLEX,AXYZP,NN/NPUZ,
C     1                  MPI_DOUBLE_COMPLEX,ICOMMZ,IERR)
      call CONVERT_1D_Z(B,AXYZP,NN,NPUZ)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 220 L=1,NPUZ
        DO 210 J=1,NNYZ
          DO 200 K=1,NNZZ
!DIR$ VECTOR ALIGNED
            DO 190 I=1,NNXY
              BXZYP(I,K,J,L)=AXYZP(I,J,K,L)
  190       CONTINUE
  200     CONTINUE
  210   CONTINUE
  220 CONTINUE
!$OMP BARRIER
!$OMP MASTER
C      CALL MPI_ALLTOALL(BXZYP,NN/NPUY,MPI_DOUBLE_COMPLEX,AXZYP,NN/NPUY,
C     1                  MPI_DOUBLE_COMPLEX,ICOMMY,IERR)
      call CONVERT_1D_Y(BXZYP,AXZYP,NN,NPUY)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 260 K=1,NNZZ
        DO 250 J=1,NNYY
          DO 240 L=1,NPUY
!DIR$ VECTOR ALIGNED
            DO 230 I=1,NNXY
              BXPYZ(I,L,J,K)=AXZYP(I,K,J,L)
  230       CONTINUE
  240     CONTINUE
  250   CONTINUE
  260 CONTINUE
      RETURN
      END
      SUBROUTINE PZFFT3DVB(A,AXPYZ,AXZYP,AYPZX,AYZX,AYZX2,AZXYP,B,BXYZP,
     1                     BXZYP,BYZXP,BZPXY,BZXY,BZXY2,C,WX,WY,WZ,
     2                     NX,NY,NZ,LNX,LNY,LNZ,NPUY,NPUZ,
     3                     IOPT)
      IMPLICIT REAL*8 (A-H,O-Z)
! Parameters written in param.h !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      PARAMETER (MAXNPU=65536)
      PARAMETER (NDA2=65536)
      PARAMETER (NDA3=4096)
      PARAMETER (NBLK=16)
      PARAMETER (NP=8)
      PARAMETER (L2SIZE=2097152)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      COMPLEX*16 A((NX/NPUY)*(NY/NPUZ),*),AXPYZ(NX/NPUY,NPUY,NY/NPUY,*),
     1           AXZYP(NX/NPUY,NZ/NPUZ,NY/NPUZ,*),
     2           AYPZX(NY/NPUY,NPUY,*),AYZX(NY,*),
     3           AYZX2((NY/NPUY)*(NZ/NPUZ),*),
     4           AZXYP(NZ/NPUZ,(NX/NPUY)*(NY/NPUZ),*)
      COMPLEX*16 B(NX,*),BXYZP(NX/NPUY,NY/NPUZ,NZ/NPUZ,*),
     1           BXZYP(NX/NPUY,NZ/NPUZ,NY/NPUY,*),
     2           BYZXP(NY/NPUY,(NZ/NPUZ)*(NX/NPUY),*),
     3           BZPXY(NZ/NPUZ,NPUZ,*),BZXY(NZ,*),
     4           BZXY2((NZ/NPUZ)*(NX/NPUY),*)
      COMPLEX*16 C(*)
      COMPLEX*16 WX(*),WY(*),WZ(*)
      DIMENSION LNX(*),LNY(*),LNZ(*)
C
      NNXY=NX/NPUY
      NNYY=NY/NPUY
      NNYZ=NY/NPUZ
      NNZZ=NZ/NPUZ
      NN=NNXY*NNYZ*NZ
C
      IF (IOPT .EQ. 1) THEN
!$OMP DO
        DO 40 L=1,NPUY
          DO 30 J=1,NNYY
            DO 20 K=1,NNZZ
!DIR$ VECTOR ALIGNED
              DO 10 I=1,NNXY
                BXZYP(I,K,J,L)=AXPYZ(I,L,J,K)
   10         CONTINUE
   20       CONTINUE
   30     CONTINUE
   40   CONTINUE
!$OMP BARRIER
!$OMP MASTER
C        CALL MPI_ALLTOALL(BXZYP,NN/NPUY,MPI_DOUBLE_COMPLEX,AXZYP,
C     1                    NN/NPUY,MPI_DOUBLE_COMPLEX,ICOMMY,IERR)
      call CONVERT_1D_Y(BXZYP,AXZYP,NN,NPUY)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
        DO 80 L=1,NPUZ
          DO 70 K=1,NNZZ
            DO 60 J=1,NNYZ
!DIR$ VECTOR ALIGNED
              DO 50 I=1,NNXY
                BXYZP(I,J,K,L)=AXZYP(I,K,J,L)
   50         CONTINUE
   60       CONTINUE
   70     CONTINUE
   80   CONTINUE
!$OMP BARRIER
!$OMP MASTER
C        CALL MPI_ALLTOALL(BXYZP,NN/NPUZ,MPI_DOUBLE_COMPLEX,A,NN/NPUZ,
C     1                    MPI_DOUBLE_COMPLEX,ICOMMZ,IERR)
      call CONVERT_1D_Z(BXYZP,A,NN,NPUZ)
!$OMP END MASTER
!$OMP BARRIER
      END IF
C
!$OMP DO
      DO 120 II=1,NNXY*NNYZ,NBLK
        DO 110 JJ=1,NZ,NBLK
          DO 100 I=II,MIN0(II+NBLK-1,NNXY*NNYZ)
!DIR$ VECTOR ALIGNED
            DO 90 J=JJ,MIN0(JJ+NBLK-1,NZ)
              BZXY(J,I)=A(I,J)
   90       CONTINUE
  100     CONTINUE
  110   CONTINUE
  120 CONTINUE
!$OMP DO
      DO 150 I=1,NNXY*NNYZ
        CALL FFT235(BZPXY(1,1,I),C,WZ,NZ,LNZ)
        DO 140 L=1,NPUZ
!DIR$ VECTOR ALIGNED
          DO 130 K=1,NNZZ
            AZXYP(K,I,L)=BZPXY(K,L,I)
  130     CONTINUE
  140   CONTINUE
  150 CONTINUE
!$OMP BARRIER
!$OMP MASTER
C      CALL MPI_ALLTOALL(AZXYP,NN/NPUZ,MPI_DOUBLE_COMPLEX,BZXY2,NN/NPUZ,
C     1                  MPI_DOUBLE_COMPLEX,ICOMMZ,IERR)
      CALL CONVERT_1D_Z(AZXYP,BZXY2,NN,NPUZ)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 190 KK=1,NNZZ*NNXY,NBLK
        DO 170 K=KK,MIN0(KK+NBLK-1,NNZZ*NNXY)
!DIR$ VECTOR ALIGNED
          DO 160 J=1,NY
            AYZX(J,K)=BZXY2(K,J)
  160     CONTINUE
  170   CONTINUE
        DO 180 K=KK,MIN0(KK+NBLK-1,NNZZ*NNXY)
          CALL FFT235(AYZX(1,K),C,WY,NY,LNY)
  180   CONTINUE
  190 CONTINUE
!$OMP DO
      DO 220 L=1,NPUY
        DO 210 K=1,NNZZ*NNXY
!DIR$ VECTOR ALIGNED
          DO 200 J=1,NNYY
            BYZXP(J,K,L)=AYPZX(J,L,K)
  200     CONTINUE
  210   CONTINUE
  220 CONTINUE
!$OMP BARRIER
!$OMP MASTER
C      CALL MPI_ALLTOALL(BYZXP,NN/NPUY,MPI_DOUBLE_COMPLEX,AYZX2,NN/NPUY,
C     1                  MPI_DOUBLE_COMPLEX,ICOMMY,IERR)
      CALL CONVERT_1D_Y(BYZXP,AYZX2,NN,NPUY)
!$OMP END MASTER
!$OMP BARRIER
!$OMP DO
      DO 260 JJ=1,NNYY*NNZZ,NBLK
        DO 240 J=JJ,MIN0(JJ+NBLK-1,NNYY*NNZZ)
!DIR$ VECTOR ALIGNED
          DO 230 I=1,NX
            B(I,J)=AYZX2(J,I)
  230     CONTINUE
  240   CONTINUE
        DO 250 J=JJ,MIN0(JJ+NBLK-1,NNYY*NNZZ)
          CALL FFT235(B(1,J),C,WX,NX,LNX)
  250   CONTINUE
  260 CONTINUE
      RETURN
      END
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      SUBROUTINE CONVERT_1D_Y(A,B,NN,NPUY)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMPLEX*16 A(*),B(*)
     
      CALL ALLTOALL_1D_Y(A,B,NN,NPUY)
 
      END
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      SUBROUTINE CONVERT_1D_Z(A,B,NN,NPUZ)
      IMPLICIT REAL*8 (A-H,O-Z)
      COMPLEX*16 A(*),B(*)
     
      CALL ALLTOALL_1D_Z(A,B,NN,NPUZ)
 
      END
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
