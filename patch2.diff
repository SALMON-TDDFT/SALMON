diff -uprN ./ARTED/CMakeLists.txt ./arted0/CMakeLists.txt
--- ./ARTED/CMakeLists.txt	2017-03-03 04:59:10.000000000 +0900
+++ ./arted0/CMakeLists.txt	2017-03-03 05:02:37.000000000 +0900
@@ -65,7 +65,6 @@ option_set(USE_TLOG                     
 option_set(USE_PAPI                       "Use Performance API"                                      OFF)
 option_set(USE_NVTX                       "Use NVIDIA Tools Extension Library"                       OFF)
 option_set(OPT_STENCIL                    "Optimize stencil code"                                    ON)
-option_set(STENCIL_WITH_C                 "Use C code at stencil"                                    OFF)
 option_set(DOMAIN_IS_POW2                 "Stencil domain is power of two"                           OFF)
 option_set(ENABLE_CURRENT_PREPROCESSING   "Enable preprocessing of the current computation in RT"    OFF)
 option_set(ENABLE_ARRAY_PADDING           "Enable array padding for the stencil"                     ON)
@@ -73,6 +72,7 @@ option_set(ENABLE_EXPLICIT_VEC          
 option_set(ENABLE_LOOP_BLOCKING           "Enable loop blocking at the stencil"                      OFF)
 option_set(ENABLE_SWPREFETCH              "Enable software prefetch in the explicit vec of stencil"  OFF)
 option_set(ENABLE_REDUCE_FOR_MANYCORE     "Enable optimized reduction code for many-core processor"  OFF)
+option_set(ENABLE_OPENACC                 "Enable OpenACC for NVIDIA GPUs"                           OFF)
 option_set(ENABLE_LARGE_BLOCKING          "Enable large blocking for accelerator"                    OFF)
 option_set(USE_OLD_PROPAGATOR             "Use old propagator for comparing to past results"         OFF)
 
@@ -118,7 +118,6 @@ add_definitions_if(USE_OLD_PROPAGATOR   
 if (OPT_STENCIL)
   add_definitions(-DARTED_STENCIL_OPTIMIZED)
 
-  add_definitions_if(STENCIL_WITH_C       -DARTED_STENCIL_WITH_C)
   add_definitions_if(DOMAIN_IS_POW2       -DARTED_DOMAIN_POWER_OF_TWO)
   add_definitions_if(ENABLE_EXPLICIT_VEC  -DARTED_EXPLICIT_VECTORIZATION)
   add_definitions_if(ENABLE_SWPREFETCH    -DARTED_ENABLE_SOFTWARE_PREFETCH)
diff -uprN ./ARTED/GS/CG.f90 ./arted0/GS/CG.f90
--- ./ARTED/GS/CG.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/GS/CG.f90	2017-03-03 05:02:37.000000000 +0900
@@ -62,7 +62,7 @@ Subroutine CG_omp(iter_cg_max)
     end do
     s=1.0d0/sqrt(sum(abs(zu_GS(:,ib,ik))**2)*Hxyz)
     xk_omp(1:NL,thr_id)=zu_GS(1:NL,ib,ik)*s
-    call hpsi_omp_KB(ik,xk_omp(:,thr_id),txk_omp(:,thr_id),hxk_omp(:,thr_id))
+    call hpsi_omp_KB_GS(ik,xk_omp(:,thr_id),txk_omp(:,thr_id),hxk_omp(:,thr_id))
     xkHxk=sum(conjg(xk_omp(:,thr_id))*hxk_omp(:,thr_id))*Hxyz
     xkTxk=sum(conjg(xk_omp(:,thr_id))*txk_omp(:,thr_id))*Hxyz
 
@@ -87,7 +87,7 @@ Subroutine CG_omp(iter_cg_max)
       pko_omp(1:NL,thr_id)=pk_omp(1:NL,thr_id)-xk_omp(1:NL,thr_id)*zs
       s=1.0d0/sqrt(sum(abs(pko_omp(:,thr_id))**2)*Hxyz)
       pko_omp(1:NL,thr_id)=pko_omp(1:NL,thr_id)*s
-      call hpsi_omp_KB(ik,pko_omp(:,thr_id),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
+      call hpsi_omp_KB_GS(ik,pko_omp(:,thr_id),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
       xkHpk=sum(conjg( xk_omp(:,thr_id))*htpsi_omp(:,thr_id))*Hxyz
       pkHpk=sum(conjg(pko_omp(:,thr_id))*htpsi_omp(:,thr_id))*Hxyz
       ev=0.5d0*((xkHxk+pkHpk)-sqrt((xkHxk-pkHpk)**2+4*abs(xkHpk)**2))
@@ -104,7 +104,7 @@ Subroutine CG_omp(iter_cg_max)
 
     s=1.0d0/sqrt(sum(abs(xk_omp(:,thr_id))**2)*Hxyz)
     zu_GS(1:NL,ib,ik)=xk_omp(1:NL,thr_id)*s
-    call hpsi_omp_KB(ik,zu_GS(:,ib,ik),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
+    call hpsi_omp_KB_GS(ik,zu_GS(:,ib,ik),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
     xkHxk=sum(conjg(zu_GS(1:NL,ib,ik))*htpsi_omp(:,thr_id))*Hxyz
     esp_var_l(ib,ik)=sqrt(sum(abs(htpsi_omp(:,thr_id)-xkHxk*zu_GS(1:NL,ib,ik))**2)*Hxyz)*occ(ib,ik)
   enddo
diff -uprN ./ARTED/GS/diag.f90 ./arted0/GS/diag.f90
--- ./ARTED/GS/diag.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/GS/diag.f90	2017-03-03 05:02:37.000000000 +0900
@@ -63,7 +63,7 @@ Subroutine diag_omp
   do ik=NK_s,NK_e
     do ib1=1,NB
       tpsi_omp(1:NL,thr_id)=zu_GS(1:NL,ib1,ik)
-      call hpsi_omp_KB(ik,tpsi_omp(:,thr_id),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
+      call hpsi_omp_KB_GS(ik,tpsi_omp(:,thr_id),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
       do ib2=ib1+1,NB
         za(ib2,ib1)=sum(conjg(zu_GS(:,ib2,ik))*htpsi_omp(:,thr_id))*Hxyz
         za(ib1,ib2)=conjg(za(ib2,ib1))
diff -uprN ./ARTED/GS/sp_energy.f90 ./arted0/GS/sp_energy.f90
--- ./ARTED/GS/sp_energy.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/GS/sp_energy.f90	2017-03-03 05:02:37.000000000 +0900
@@ -47,7 +47,7 @@ Subroutine sp_energy_omp
   enddo
     do ib=1,NB
       tpsi_omp(1:NL,thr_id)=zu_GS(1:NL,ib,ik)
-      call hpsi_omp_KB(ik,tpsi_omp(:,thr_id),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
+      call hpsi_omp_KB_GS(ik,tpsi_omp(:,thr_id),ttpsi_omp(:,thr_id),htpsi_omp(:,thr_id))
       esp_l(ib,ik)=sum(conjg(zu_GS(:,ib,ik))*htpsi_omp(:,thr_id))*Hxyz
     enddo
   enddo
diff -uprN ./ARTED/RT/CMakeLists.txt ./arted0/RT/CMakeLists.txt
--- ./ARTED/RT/CMakeLists.txt	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/RT/CMakeLists.txt	2017-03-03 05:02:37.000000000 +0900
@@ -3,7 +3,6 @@ set(SOURCES
     dt_evolve_hpsi.f90
     current.f90
     k_shift_wf.f90
-    hpsi_RT.f90
     init_Ac.f90
     Fourier_tr.f90
     )
diff -uprN ./ARTED/RT/dt_evolve_hpsi.f90 ./arted0/RT/dt_evolve_hpsi.f90
--- ./ARTED/RT/dt_evolve_hpsi.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/RT/dt_evolve_hpsi.f90	2017-03-03 05:02:37.000000000 +0900
@@ -54,12 +54,12 @@ subroutine dt_evolve_hpsi(flag_current)
     ik=ik_table(ikb)
     ib=ib_table(ikb)
 
-    call init(ztpsi(:,4,tid),zu(:,ib,ik))
-    call hpsi_omp_KB_RT(ik,ztpsi(:,4,tid),ztpsi(:,1,tid))
-    call hpsi_omp_KB_RT(ik,ztpsi(:,1,tid),ztpsi(:,2,tid))
-    call hpsi_omp_KB_RT(ik,ztpsi(:,2,tid),ztpsi(:,3,tid))
-    call hpsi_omp_KB_RT(ik,ztpsi(:,3,tid),ztpsi(:,4,tid))
-    call update(zfac,ztpsi(:,:,tid),zu(:,ib,ik))
+    call init(zhtpsi(:,4,tid),zu(:,ib,ik))
+    call hpsi_omp_KB_RT(ik,zhtpsi(:,4,tid),zhtpsi(:,1,tid))
+    call hpsi_omp_KB_RT(ik,zhtpsi(:,1,tid),zhtpsi(:,2,tid))
+    call hpsi_omp_KB_RT(ik,zhtpsi(:,2,tid),zhtpsi(:,3,tid))
+    call hpsi_omp_KB_RT(ik,zhtpsi(:,3,tid),zhtpsi(:,4,tid))
+    call update(zfac,zhtpsi(:,:,tid),zu(:,ib,ik))
 
 #ifdef ARTED_CURRENT_PREPROCESSING
     if(flag_current) call current_omp_KB_ST(ib,ik,zu(:,ib,ik))
@@ -144,18 +144,18 @@ subroutine dt_evolve_hpsi(flag_current)
   ! NVTX_BEG('dt_evolve_hpsi()',2)
   call timelog_begin(LOG_HPSI)
 
-!$acc data pcopy(zu) create(ztpsi)
+!$acc data pcopy(zu) create(zhtpsi)
   do ikb0=1,NKB, blk_nkb_hpsi
     num_ikb1 = min(blk_nkb_hpsi, NKB-ikb0+1)
     ikb_s = ikb0
     ikb_e = ikb0 + num_ikb1-1
 
-    call init_LBLK(ztpsi(:,:,4),zu(:,:,:), ikb_s,ikb_e)
-    call hpsi_acc_KB_RT_LBLK(ztpsi(:,:,4),ztpsi(:,:,1), ikb_s,ikb_e)
-    call hpsi_acc_KB_RT_LBLK(ztpsi(:,:,1),ztpsi(:,:,2), ikb_s,ikb_e)
-    call hpsi_acc_KB_RT_LBLK(ztpsi(:,:,2),ztpsi(:,:,3), ikb_s,ikb_e)
-    call hpsi_acc_KB_RT_LBLK(ztpsi(:,:,3),ztpsi(:,:,4), ikb_s,ikb_e)
-    call update_LBLK(zfac,ztpsi(:,:,:),zu(:,:,:), ikb_s,ikb_e)
+    call init_LBLK(zhtpsi(:,:,4),zu(:,:,:), ikb_s,ikb_e)
+    call hpsi_acc_KB_RT_LBLK(zhtpsi(:,:,4),zhtpsi(:,:,1), ikb_s,ikb_e)
+    call hpsi_acc_KB_RT_LBLK(zhtpsi(:,:,1),zhtpsi(:,:,2), ikb_s,ikb_e)
+    call hpsi_acc_KB_RT_LBLK(zhtpsi(:,:,2),zhtpsi(:,:,3), ikb_s,ikb_e)
+    call hpsi_acc_KB_RT_LBLK(zhtpsi(:,:,3),zhtpsi(:,:,4), ikb_s,ikb_e)
+    call update_LBLK(zfac,zhtpsi(:,:,:),zu(:,:,:), ikb_s,ikb_e)
 
 #ifdef ARTED_CURRENT_PREPROCESSING
     if(flag_current) call current_acc_KB_ST_LBLK(zu(:,:,:), ikb_s,ikb_e)
diff -uprN ./ARTED/RT/hpsi_RT.f90 ./arted0/RT/hpsi_RT.f90
--- ./ARTED/RT/hpsi_RT.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/RT/hpsi_RT.f90	1970-01-01 09:00:00.000000000 +0900
@@ -1,249 +0,0 @@
-!
-!  Copyright 2016 ARTED developers
-!
-!  Licensed under the Apache License, Version 2.0 (the "License");
-!  you may not use this file except in compliance with the License.
-!  You may obtain a copy of the License at
-!
-!      http://www.apache.org/licenses/LICENSE-2.0
-!
-!  Unless required by applicable law or agreed to in writing, software
-!  distributed under the License is distributed on an "AS IS" BASIS,
-!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-!  See the License for the specific language governing permissions and
-!  limitations under the License.
-!
-!--------10--------20--------30--------40--------50--------60--------70--------80--------90--------100-------110-------120--------130
-# define TIMELOG_BEG(id) call timelog_thread_begin(id)
-# define TIMELOG_END(id) call timelog_thread_end(id)
-
-#ifdef ARTED_USE_NVTX
-#define NVTX_BEG(name,id)  call nvtxStartRange(name,id)
-#define NVTX_END()         call nvtxEndRange()
-#else
-#define NVTX_BEG(name,id)
-#define NVTX_END()
-#endif
-
-subroutine hpsi_omp_KB_RT(ik,tpsi,htpsi)
-  use Global_Variables, only: functional
-  use opt_variables, only: PNL
-  implicit none
-  integer,intent(in)     :: ik
-  complex(8),intent(in)  :: tpsi(0:PNL-1)
-  complex(8),intent(out) :: htpsi(0:PNL-1)
-
-  select case(functional)
-    case('PZ','PZM', 'PBE','TBmBJ')
-      call hpsi1(ik,tpsi,htpsi)
-    case('TPSS','VS98')
-      call err_finalize('hpsi_omp_KB_RT: TPSS/VS98 ver. not implemented.')
-  end select
-
-contains
-  subroutine pseudo_pt(ik,tpsi,htpsi)
-    use Global_Variables, only: Mps,uV,iuV,Hxyz,ekr_omp,Nlma,a_tbl
-#ifdef ARTED_STENCIL_PADDING
-    use opt_variables, only: zJxyz => zKxyz,PNL
-#else
-    use opt_variables, only: zJxyz,PNL
-#endif
-    implicit none
-    integer,intent(in)     :: ik
-    complex(8),intent(in)  :: tpsi(0:PNL-1)
-    complex(8),intent(out) :: htpsi(0:PNL-1)
-
-    integer    :: ilma,ia,j,i
-    complex(8) :: uVpsi
-
-    !Calculating nonlocal part
-    do ilma=1,Nlma
-      ia=a_tbl(ilma)
-      uVpsi=0.d0
-      do j=1,Mps(ia)
-        i=zJxyz(j,ia)
-        uVpsi=uVpsi+uV(j,ilma)*ekr_omp(j,ia,ik)*tpsi(i)
-      enddo
-      uVpsi=uVpsi*Hxyz*iuV(ilma)
-!dir$ ivdep
-      do j=1,Mps(ia)
-        i=zJxyz(j,ia)
-        htpsi(i)=htpsi(i)+conjg(ekr_omp(j,ia,ik))*uVpsi*uV(j,ilma)
-      enddo
-    enddo
-  end subroutine
-
-  subroutine hpsi1(ik,tpsi,htpsi)
-    use Global_Variables, only: kAc,lapx,lapy,lapz,nabx,naby,nabz,Vloc
-    use opt_variables, only: lapt,PNLx,PNLy,PNLz
-    use timelog
-#ifdef ARTED_USE_NVTX
-    use nvtx
-#endif
-    implicit none
-    integer,intent(in)     :: ik
-    complex(8),intent(in)  :: tpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
-    complex(8),intent(out) :: htpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
-
-    real(8)    :: k2,k2lap0_2
-    real(8)    :: nabt(12)
-
-    NVTX_BEG('hpsi1()',3)
-
-    k2=sum(kAc(ik,:)**2)
-    k2lap0_2=(k2-(lapx(0)+lapy(0)+lapz(0)))*0.5d0
-
-    TIMELOG_BEG(LOG_HPSI_STENCIL)
-    nabt( 1: 4)=kAc(ik,1)*nabx(1:4)
-    nabt( 5: 8)=kAc(ik,2)*naby(1:4)
-    nabt( 9:12)=kAc(ik,3)*nabz(1:4)
-
-#ifdef ARTED_STENCIL_ORIGIN
-    call hpsi1_RT_stencil(k2lap0_2,Vloc,lapt(1:4),lapt(5:8),lapt(9:12),nabt(1:4),nabt(5:8),nabt(9:12),tpsi,htpsi)
-#else
-    call hpsi1_RT_stencil(k2lap0_2,Vloc,lapt,nabt,tpsi,htpsi)
-#endif
-    TIMELOG_END(LOG_HPSI_STENCIL)
-
-    TIMELOG_BEG(LOG_HPSI_PSEUDO)
-    call pseudo_pt(ik,tpsi,htpsi)
-    TIMELOG_END(LOG_HPSI_PSEUDO)
-
-    NVTX_END()
-  end subroutine
-end subroutine hpsi_omp_KB_RT
-
-
-#ifdef ARTED_LBLK
-subroutine hpsi_acc_KB_RT_LBLK(tpsi,htpsi, ikb_s,ikb_e)
-  use Global_Variables
-  use opt_variables
-#ifdef ARTED_USE_NVTX
-  use nvtx
-#endif
-  implicit none
-  integer :: ikb_s,ikb_e
-  complex(8),intent(in)  ::  tpsi(0:PNL-1, ikb_s:ikb_e)
-  complex(8),intent(out) :: htpsi(0:PNL-1, ikb_s:ikb_e)
-  integer :: ikb,ik
-
-  NVTX_BEG('hpsi_acc_KB_RT_LBLK()', 3)
-  select case(functional)
-    case('PZ','PZM', 'PBE','TBmBJ')
-      call hpsi1_LBLK(tpsi(:,:),htpsi(:,:), ikb_s,ikb_e)
-    case('TPSS','VS98')
-      call err_finalize('hpsi_acc_KB_RT_LBLK: TPSS/VS98 ver. not implemented.')
-  end select
-  NVTX_END()
-
-contains
-  subroutine pseudo_pt_LBLK(tpsi,htpsi, ikb_s,ikb_e)
-    use Global_Variables, only: Mps,uV,iuV,Hxyz,ekr_omp,Nlma,a_tbl
-#ifdef ARTED_STENCIL_PADDING
-    use opt_variables, only: zJxyz => zKxyz,PNL
-#else
-    use opt_variables, only: zJxyz,PNL
-#endif
-    implicit none
-    integer :: ikb_s,ikb_e
-    complex(8),intent(in)  ::  tpsi(0:PNL-1, ikb_s:ikb_e)
-    complex(8),intent(out) :: htpsi(0:PNL-1, ikb_s:ikb_e)
-
-    integer    :: ilma,ia,j,i
-    integer    :: ikb,ik
-    complex(8) :: uVpsi0
-    complex(8) :: uVpsi(Nlma, ikb_s:ikb_e)
-    complex(8) :: tpsi0
-    integer    :: my_nlma, n, vi
-
-    !Calculating nonlocal part
-
-!$acc kernels pcopy(tpsi) create(uVpsi) pcopyin(a_tbl,ekr_omp,ik_table,mps,uv,iuv) &
-#ifdef ARTED_STENCIL_PADDING
-!$acc& pcopyin(zKxyz) &
-#else
-!$acc& pcopyin(zJxyz) &
-#endif
-!$acc& pcopyin(t4ppt_ilma,t4ppt_j,t4ppt_nlma,t4ppt_vi2i)
-!$acc loop gang vector(1)
-    do ikb = ikb_s, ikb_e
-!$acc loop gang vector(1)
-      do ilma=1,Nlma
-        ik=ik_table(ikb)
-        ia=a_tbl(ilma)
-        uVpsi0=cmplx(0.d0, 0.d0, kind=8)
-!$acc loop vector(128) reduction(+:uVpsi0)
-        do j=1,Mps(ia)
-          i=zJxyz(j,ia)
-          uVpsi0=uVpsi0 + uV(j,ilma)*ekr_omp(j,ia,ik)*tpsi(i,ikb)
-        enddo
-        uVpsi(ilma,ikb)=uVpsi0*Hxyz*iuV(ilma)
-      enddo
-    enddo
-
-!$acc loop gang vector(1)
-    do ikb = ikb_s, ikb_e
-!$acc loop independent gang vector(128)
-      do vi = 0, t4ppt_max_vi-1
-        ik=ik_table(ikb)
-        my_nlma = t4ppt_nlma(vi)
-        if (my_nlma < 1) cycle
-        tpsi0=cmplx(0.d0, 0.d0, kind=8)
-!$acc loop seq
-        do n = 1, my_nlma
-          ilma = t4ppt_ilma(vi,n)
-          j    = t4ppt_j   (vi,n)
-          ia   = a_tbl(ilma)
-          tpsi0= tpsi0+conjg(ekr_omp(j,ia,ik))*uVpsi(ilma,ikb)*uV(j,ilma)
-        enddo
-        i = t4ppt_vi2i(vi)
-        htpsi(i,ikb)=htpsi(i,ikb)+tpsi0
-      enddo
-    enddo
-!$acc end kernels
-
-  end subroutine
-
-  subroutine hpsi1_LBLK(tpsi,htpsi, ikb_s,ikb_e)
-    use Global_Variables
-    use opt_variables
-    use timelog
-
-    implicit none
-    integer :: ikb_s,ikb_e
-    complex(8),intent(in)  ::  tpsi(0:PNL-1, ikb_s:ikb_e)
-    complex(8),intent(out) :: htpsi(0:PNL-1, ikb_s:ikb_e)
-    integer :: ikb,ik
-
-    real(8) :: k2
-    real(8) :: k2lap0_2(ikb_s:ikb_e)
-    real(8) :: nabt(12, ikb_s:ikb_e)
-!$acc data pcopy(tpsi) create(k2lap0_2,nabt)
-
-    NVTX_BEG('hpsi1_LBLK(): hpsi1_RT_stencil', 4)
-    TIMELOG_BEG(LOG_HPSI_STENCIL)
-!$acc kernels pcopy(k2lap0_2,nabt) pcopyin(ik_table,kac,lapx,lapy,lapz,nabx,naby,nabz)
-!$acc loop gang vector
-    do ikb = ikb_s, ikb_e
-      ik=ik_table(ikb)
-      k2=sum(kAc(ik,:)**2)
-      k2lap0_2(ikb)=(k2-(lapx(0)+lapy(0)+lapz(0)))*0.5d0
-      nabt( 1: 4,ikb)=kAc(ik,1)*nabx(1:4)
-      nabt( 5: 8,ikb)=kAc(ik,2)*naby(1:4)
-      nabt( 9:12,ikb)=kAc(ik,3)*nabz(1:4)
-    enddo
-!$acc end kernels
-    call hpsi1_RT_stencil_LBLK(k2lap0_2(:),Vloc,lapt,nabt(:,:),tpsi(:,:),htpsi(:,:), ikb_s,ikb_e)
-    TIMELOG_END(LOG_HPSI_STENCIL)
-    NVTX_END()
-
-    NVTX_BEG('hpsi1_LBLK(): pseudo_pt', 5)
-    TIMELOG_BEG(LOG_HPSI_PSEUDO)
-    call pseudo_pt_LBLK(tpsi(:,:),htpsi(:,:), ikb_s,ikb_e)
-    TIMELOG_END(LOG_HPSI_PSEUDO)
-    NVTX_END()
-
-!$acc end data
-  end subroutine
-end subroutine hpsi_acc_KB_RT_LBLK
-#endif
diff -uprN ./ARTED/bin/.gitignore ./arted0/bin/.gitignore
--- ./ARTED/bin/.gitignore	1970-01-01 09:00:00.000000000 +0900
+++ ./arted0/bin/.gitignore	2017-02-23 20:08:33.000000000 +0900
@@ -0,0 +1,2 @@
+*
+!.gitignore
diff -uprN ./ARTED/common/CMakeLists.txt ./arted0/common/CMakeLists.txt
--- ./ARTED/common/CMakeLists.txt	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/common/CMakeLists.txt	2017-03-03 05:02:37.000000000 +0900
@@ -6,8 +6,11 @@ set(SOURCES
     Ylm_dYlm.f90
     psi_rho.f90
     hpsi.f90
-    hpsi_stencil.f90
     preprocessor.f90
     )
 
+if (ENABLE_OPENACC)
+  set(SOURCES ${SOURCES} acc/hpsi.f90)
+endif ()
+
 add_library(${COMMON_LIB} STATIC ${SOURCES})
diff -uprN ./ARTED/common/acc/hpsi.f90 ./arted0/common/acc/hpsi.f90
--- ./ARTED/common/acc/hpsi.f90	1970-01-01 09:00:00.000000000 +0900
+++ ./arted0/common/acc/hpsi.f90	2017-03-03 05:02:37.000000000 +0900
@@ -0,0 +1,158 @@
+!
+!  Copyright 2016 ARTED developers
+!
+!  Licensed under the Apache License, Version 2.0 (the "License");
+!  you may not use this file except in compliance with the License.
+!  You may obtain a copy of the License at
+!
+!      http://www.apache.org/licenses/LICENSE-2.0
+!
+!  Unless required by applicable law or agreed to in writing, software
+!  distributed under the License is distributed on an "AS IS" BASIS,
+!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+!  See the License for the specific language governing permissions and
+!  limitations under the License.
+!
+!--------10--------20--------30--------40--------50--------60--------70--------80--------90--------100-------110-------120--------130
+#define LOG_BEG(id) call timelog_thread_begin(id)
+#define LOG_END(id) call timelog_thread_end(id)
+
+#ifdef ARTED_USE_NVTX
+#define NVTX_BEG(name,id)  call nvtxStartRange(name,id)
+#define NVTX_END()         call nvtxEndRange()
+#else
+#define NVTX_BEG(name,id)
+#define NVTX_END()
+#endif
+
+subroutine hpsi_acc_KB_RT_LBLK(tpsi,htpsi, ikb_s,ikb_e)
+  use Global_Variables
+  use opt_variables
+#ifdef ARTED_USE_NVTX
+  use nvtx
+#endif
+  implicit none
+  integer :: ikb_s,ikb_e
+  complex(8),intent(in)  ::  tpsi(0:PNL-1, ikb_s:ikb_e)
+  complex(8),intent(out) :: htpsi(0:PNL-1, ikb_s:ikb_e)
+  integer :: ikb,ik
+
+  NVTX_BEG('hpsi_acc_KB_RT_LBLK()', 3)
+  select case(functional)
+    case('PZ','PZM', 'PBE','TBmBJ')
+      call hpsi1_LBLK(tpsi(:,:),htpsi(:,:), ikb_s,ikb_e)
+    case('TPSS','VS98')
+      call err_finalize('hpsi_acc_KB_RT_LBLK: TPSS/VS98 ver. not implemented.')
+  end select
+  NVTX_END()
+
+contains
+  subroutine pseudo_pt_LBLK(tpsi,htpsi, ikb_s,ikb_e)
+    use Global_Variables, only: Mps,uV,iuV,Hxyz,ekr_omp,Nlma,a_tbl
+#ifdef ARTED_STENCIL_PADDING
+    use opt_variables, only: zJxyz => zKxyz,PNL
+#else
+    use opt_variables, only: zJxyz,PNL
+#endif
+    implicit none
+    integer :: ikb_s,ikb_e
+    complex(8),intent(in)  ::  tpsi(0:PNL-1, ikb_s:ikb_e)
+    complex(8),intent(out) :: htpsi(0:PNL-1, ikb_s:ikb_e)
+
+    integer    :: ilma,ia,j,i
+    integer    :: ikb,ik
+    complex(8) :: uVpsi0
+    complex(8) :: uVpsi(Nlma, ikb_s:ikb_e)
+    complex(8) :: tpsi0
+    integer    :: my_nlma, n, vi
+
+    !Calculating nonlocal part
+
+!$acc kernels pcopy(tpsi) create(uVpsi) pcopyin(a_tbl,ekr_omp,ik_table,mps,uv,iuv) &
+#ifdef ARTED_STENCIL_PADDING
+!$acc& pcopyin(zKxyz) &
+#else
+!$acc& pcopyin(zJxyz) &
+#endif
+!$acc& pcopyin(t4ppt_ilma,t4ppt_j,t4ppt_nlma,t4ppt_vi2i)
+!$acc loop gang vector(1)
+    do ikb = ikb_s, ikb_e
+!$acc loop gang vector(1)
+      do ilma=1,Nlma
+        ik=ik_table(ikb)
+        ia=a_tbl(ilma)
+        uVpsi0=cmplx(0.d0, 0.d0, kind=8)
+!$acc loop vector(128) reduction(+:uVpsi0)
+        do j=1,Mps(ia)
+          i=zJxyz(j,ia)
+          uVpsi0=uVpsi0 + uV(j,ilma)*ekr_omp(j,ia,ik)*tpsi(i,ikb)
+        enddo
+        uVpsi(ilma,ikb)=uVpsi0*Hxyz*iuV(ilma)
+      enddo
+    enddo
+
+!$acc loop gang vector(1)
+    do ikb = ikb_s, ikb_e
+!$acc loop independent gang vector(128)
+      do vi = 0, t4ppt_max_vi-1
+        ik=ik_table(ikb)
+        my_nlma = t4ppt_nlma(vi)
+        if (my_nlma < 1) cycle
+        tpsi0=cmplx(0.d0, 0.d0, kind=8)
+!$acc loop seq
+        do n = 1, my_nlma
+          ilma = t4ppt_ilma(vi,n)
+          j    = t4ppt_j   (vi,n)
+          ia   = a_tbl(ilma)
+          tpsi0= tpsi0+conjg(ekr_omp(j,ia,ik))*uVpsi(ilma,ikb)*uV(j,ilma)
+        enddo
+        i = t4ppt_vi2i(vi)
+        htpsi(i,ikb)=htpsi(i,ikb)+tpsi0
+      enddo
+    enddo
+!$acc end kernels
+
+  end subroutine
+
+  subroutine hpsi1_LBLK(tpsi,htpsi, ikb_s,ikb_e)
+    use Global_Variables
+    use opt_variables
+    use timelog
+
+    implicit none
+    integer :: ikb_s,ikb_e
+    complex(8),intent(in)  ::  tpsi(0:PNL-1, ikb_s:ikb_e)
+    complex(8),intent(out) :: htpsi(0:PNL-1, ikb_s:ikb_e)
+    integer :: ikb,ik
+
+    real(8) :: k2
+    real(8) :: k2lap0_2(ikb_s:ikb_e)
+    real(8) :: nabt(12, ikb_s:ikb_e)
+!$acc data pcopy(tpsi) create(k2lap0_2,nabt)
+
+    NVTX_BEG('hpsi1_LBLK(): hpsi1_RT_stencil', 4)
+    LOG_BEG(LOG_HPSI_STENCIL)
+!$acc kernels pcopy(k2lap0_2,nabt) pcopyin(ik_table,kac,lapx,lapy,lapz,nabx,naby,nabz)
+!$acc loop gang vector
+    do ikb = ikb_s, ikb_e
+      ik=ik_table(ikb)
+      k2=sum(kAc(ik,:)**2)
+      k2lap0_2(ikb)=(k2-(lapx(0)+lapy(0)+lapz(0)))*0.5d0
+      nabt( 1: 4,ikb)=kAc(ik,1)*nabx(1:4)
+      nabt( 5: 8,ikb)=kAc(ik,2)*naby(1:4)
+      nabt( 9:12,ikb)=kAc(ik,3)*nabz(1:4)
+    enddo
+!$acc end kernels
+    call hpsi1_RT_stencil_LBLK(k2lap0_2(:),Vloc,lapt,nabt(:,:),tpsi(:,:),htpsi(:,:), ikb_s,ikb_e)
+    LOG_END(LOG_HPSI_STENCIL)
+    NVTX_END()
+
+    NVTX_BEG('hpsi1_LBLK(): pseudo_pt', 5)
+    LOG_BEG(LOG_HPSI_PSEUDO)
+    call pseudo_pt_LBLK(tpsi(:,:),htpsi(:,:), ikb_s,ikb_e)
+    LOG_END(LOG_HPSI_PSEUDO)
+    NVTX_END()
+
+!$acc end data
+  end subroutine
+end subroutine hpsi_acc_KB_RT_LBLK
diff -uprN ./ARTED/common/hpsi.f90 ./arted0/common/hpsi.f90
--- ./ARTED/common/hpsi.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/common/hpsi.f90	2017-03-03 05:02:37.000000000 +0900
@@ -13,71 +13,153 @@
 !  See the License for the specific language governing permissions and
 !  limitations under the License.
 !
-!This file is "hpsi.f90"
-!This file contain a subroutine.
-!Subroutine hpsi(q)
 !--------10--------20--------30--------40--------50--------60--------70--------80--------90--------100-------110-------120--------130
-subroutine hpsi_omp_KB(ik,tpsi,ttpsi,htpsi)
-  use Global_Variables, only: functional, NL
+#define LOG_BEG(id) call timelog_thread_begin(id)
+#define LOG_END(id) call timelog_thread_end(id)
+
+#ifdef ARTED_USE_NVTX
+#define NVTX_BEG(name,id)  call nvtxStartRange(name,id)
+#define NVTX_END()         call nvtxEndRange()
+#else
+#define NVTX_BEG(name,id)
+#define NVTX_END()
+#endif
+
+subroutine hpsi_omp_KB_GS(ik,tpsi,ttpsi,htpsi)
+  use Global_Variables, only: NL,NLz,NLy,NLx
+  use opt_variables, only: zhtpsi,zttpsi,PNLx,PNLy,PNLz
+  use omp_lib
   implicit none
   integer,intent(in)     :: ik
   complex(8),intent(in)  :: tpsi(NL)
   complex(8),intent(out) :: ttpsi(NL),htpsi(NL)
+  integer :: tid
 
-  select case(functional)
-    case('PZ', 'PZM','PBE','TBmBJ')
-      call hpsi1(ik,tpsi,ttpsi,htpsi)
-    case('TPSS','VS98')
-      call err_finalize('hpsi_omp_KB: TPSS/VS98 ver. not implemented.')
-  end select
+  tid = omp_get_thread_num()
+  call init(tpsi,zhtpsi(:,1,tid))
+  call hpsi_omp_KB_RT(ik,zhtpsi(:,1,tid),zhtpsi(:,2,tid),zttpsi(:,tid))
+  call copyout(zhtpsi(:,2,tid),zttpsi(:,tid),htpsi,ttpsi)
 
 contains
-  subroutine hpsi1(ik,tpsi_,ttpsi_,htpsi_)
-    use Global_Variables
-    use opt_variables
-    use timelog
+  subroutine init(zu,tpsi)
     implicit none
-    integer,intent(in)     :: ik
-    complex(8),intent(in)  :: tpsi_(NL)
-    complex(8),intent(out) :: ttpsi_(NL),htpsi_(NL)
+    complex(8),intent(in)  :: zu(0:NLz-1,0:NLy-1,0:NLx-1)
+    complex(8),intent(out) :: tpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+    integer :: ix,iy,iz
+
+!dir$ vector aligned
+    do ix=0,NLx-1
+    do iy=0,NLy-1
+    do iz=0,NLz-1
+      tpsi(iz,iy,ix)=zu(iz,iy,ix)
+    end do
+    end do
+    end do
+  end subroutine
 
-    integer :: i,ia,j,ilma
-    real(8) :: k2
-    complex(8) :: uVpsi
-    real(8) :: k2lap0_2
-    real(8) :: nabt(12)
+  subroutine copyout(zhtpsi,zttpsi,htpsi,ttpsi)
+    implicit none
+    complex(8), intent(in)  :: zhtpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+    complex(8), intent(in)  :: zttpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+    complex(8), intent(out) :: htpsi(0:NLz-1,0:NLy-1,0:NLx-1)
+    complex(8), intent(out) :: ttpsi(0:NLz-1,0:NLy-1,0:NLx-1)
+    integer :: ix,iy,iz
+
+!dir$ vector aligned
+    do ix=0,NLx-1
+    do iy=0,NLy-1
+    do iz=0,NLz-1
+      htpsi(iz,iy,ix) = zhtpsi(iz,iy,ix)
+      ttpsi(iz,iy,ix) = zttpsi(iz,iy,ix)
+    end do
+    end do
+    end do
+  end subroutine
+end subroutine
 
-    call timelog_thread_begin(LOG_HPSI)
 
-    k2=sum(kAc(ik,:)**2)
-    k2lap0_2=(k2-(lapx(0)+lapy(0)+lapz(0)))*0.5d0
+subroutine hpsi_omp_KB_RT(ik,tpsi,htpsi,ttpsi)
+  use timelog
+  use Global_Variables, only: NLx,NLy,NLz,kAc,lapx,lapy,lapz,nabx,naby,nabz,Vloc,Mps,uV,iuV,Hxyz,ekr_omp,Nlma,a_tbl
+  use opt_variables, only: lapt,PNLx,PNLy,PNLz,PNL
+#ifdef ARTED_USE_NVTX
+  use nvtx
+#endif
+  implicit none
+  integer,intent(in)              :: ik
+  complex(8),intent(in)           :: tpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+  complex(8),intent(out)          :: htpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+  complex(8),intent(out),optional :: ttpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+  real(8) :: k2,k2lap0_2
+  real(8) :: nabt(12)
+
+  NVTX_BEG('hpsi1()',3)
+
+  k2=sum(kAc(ik,:)**2)
+  k2lap0_2=(k2-(lapx(0)+lapy(0)+lapz(0)))*0.5d0
+  nabt( 1: 4)=kAc(ik,1)*nabx(1:4)
+  nabt( 5: 8)=kAc(ik,2)*naby(1:4)
+  nabt( 9:12)=kAc(ik,3)*nabz(1:4)
+
+  LOG_BEG(LOG_HPSI_STENCIL)
+    call hpsi1_RT_stencil(k2lap0_2,Vloc,lapt,nabt,tpsi,htpsi)
+    if (present(ttpsi)) then
+      call subtraction(Vloc,tpsi,htpsi,ttpsi)
+    end if
+  LOG_END(LOG_HPSI_STENCIL)
+
+  LOG_BEG(LOG_HPSI_PSEUDO)
+    call pseudo_pt(ik,tpsi,htpsi)
+  LOG_END(LOG_HPSI_PSEUDO)
 
-    call timelog_thread_begin(LOG_HPSI_STENCIL)
-    nabt( 1: 4)=kAc(ik,1)*nabx(1:4)
-    nabt( 5: 8)=kAc(ik,2)*naby(1:4)
-    nabt( 9:12)=kAc(ik,3)*nabz(1:4)
-    call hpsi1_tuned(k2lap0_2,Vloc,lapt,nabt,tpsi_,ttpsi_,htpsi_)
-    call timelog_thread_end(LOG_HPSI_STENCIL)
+  NVTX_END()
 
-    call timelog_thread_begin(LOG_HPSI_PSEUDO)
+contains
+  subroutine subtraction(Vloc,tpsi,htpsi,ttpsi)
+    implicit none
+    real(8),    intent(in)  :: Vloc(0:NLz-1,0:NLy-1,0:NLx-1)
+    complex(8), intent(in)  ::  tpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+    complex(8), intent(in)  :: htpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+    complex(8), intent(out) :: ttpsi(0:PNLz-1,0:PNLy-1,0:PNLx-1)
+    integer :: ix,iy,iz
+
+!dir$ vector aligned
+    do ix=0,NLx-1
+    do iy=0,NLy-1
+    do iz=0,NLz-1
+      ttpsi(iz,iy,ix) = htpsi(iz,iy,ix) - Vloc(iz,iy,ix)*tpsi(iz,iy,ix)
+    end do
+    end do
+    end do
+  end subroutine
+
+  subroutine pseudo_pt(ik,tpsi,htpsi)
+#ifdef ARTED_STENCIL_PADDING
+    use opt_variables, only: zJxyz => zKxyz
+#else
+    use opt_variables, only: zJxyz
+#endif
+    implicit none
+    integer,    intent(in)  :: ik
+    complex(8), intent(in)  :: tpsi(0:PNL-1)
+    complex(8), intent(out) :: htpsi(0:PNL-1)
+    integer    :: ilma,ia,j,i
+    complex(8) :: uVpsi
 
     !Calculating nonlocal part
     do ilma=1,Nlma
       ia=a_tbl(ilma)
       uVpsi=0.d0
       do j=1,Mps(ia)
-        i=Jxyz(j,ia)
-        uVpsi=uVpsi+uV(j,ilma)*ekr_omp(j,ia,ik)*tpsi_(i)
-      enddo
+        i=zJxyz(j,ia)
+        uVpsi=uVpsi+uV(j,ilma)*ekr_omp(j,ia,ik)*tpsi(i)
+      end do
       uVpsi=uVpsi*Hxyz*iuV(ilma)
 !dir$ ivdep
       do j=1,Mps(ia)
-        i=Jxyz(j,ia)
-        htpsi_(i)=htpsi_(i)+conjg(ekr_omp(j,ia,ik))*uVpsi*uV(j,ilma)
-      enddo
-    enddo
-    call timelog_thread_end(LOG_HPSI_PSEUDO)
-
-    call timelog_thread_end(LOG_HPSI)
+        i=zJxyz(j,ia)
+        htpsi(i)=htpsi(i)+conjg(ekr_omp(j,ia,ik))*uVpsi*uV(j,ilma)
+      end do
+    end do
   end subroutine
-end subroutine hpsi_omp_KB
+end subroutine
diff -uprN ./ARTED/common/hpsi_stencil.f90 ./arted0/common/hpsi_stencil.f90
--- ./ARTED/common/hpsi_stencil.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/common/hpsi_stencil.f90	1970-01-01 09:00:00.000000000 +0900
@@ -1,183 +0,0 @@
-!
-!  Copyright 2016 ARTED developers
-!
-!  Licensed under the Apache License, Version 2.0 (the "License");
-!  you may not use this file except in compliance with the License.
-!  You may obtain a copy of the License at
-!
-!      http://www.apache.org/licenses/LICENSE-2.0
-!
-!  Unless required by applicable law or agreed to in writing, software
-!  distributed under the License is distributed on an "AS IS" BASIS,
-!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-!  See the License for the specific language governing permissions and
-!  limitations under the License.
-!
-subroutine hpsi1_tuned(A,B,C,D,E,F,G)
-  use global_variables, only: NLx,NLy,NLz,zI
-#ifdef ARTED_STENCIL_ENABLE_LOOP_BLOCKING
-  use opt_variables, only: LBX => STENCIL_BLOCKING_X, LBY => STENCIL_BLOCKING_Y
-#endif
-#ifndef ARTED_DOMAIN_POWER_OF_TWO
-  use opt_variables, only: modx, mody, modz
-#endif
-  implicit none
-  real(8),   intent(in)  :: A
-  real(8),   intent(in)  :: C(12), D(12)
-  real(8),   intent(in)  :: B(0:NLz-1,0:NLy-1,0:NLx-1)
-  complex(8),intent(in)  :: E(0:NLz-1,0:NLy-1,0:NLx-1)
-  complex(8),intent(out) :: F(0:NLz-1,0:NLy-1,0:NLx-1)
-  complex(8),intent(out) :: G(0:NLz-1,0:NLy-1,0:NLx-1)
-
-#ifdef ARTED_STENCIL_ENABLE_LOOP_BLOCKING
-  integer    :: bx,by
-#endif
-  integer    :: ix,iy,iz
-  complex(8) :: v,w,u
-#if defined(__KNC__) || defined(__AVX512F__)
-  complex(8) :: t(8)
-#endif
-
-#ifdef __INTEL_COMPILER
-#if defined(__KNC__) || defined(__AVX512F__)
-#   define MEM_ALIGN   64
-#   define VECTOR_SIZE 4
-# else
-#   define MEM_ALIGN   32
-#   define VECTOR_SIZE 2
-# endif
-
-!dir$ assume_aligned B:MEM_ALIGN
-!dir$ assume_aligned E:MEM_ALIGN
-!dir$ assume_aligned F:MEM_ALIGN
-#endif
-
-#ifdef ARTED_DOMAIN_POWER_OF_TWO
-# ifdef __INTEL_COMPILER
-!dir$ assume (mod(NLx, VECTOR_SIZE) == 0)
-!dir$ assume (mod(NLy, VECTOR_SIZE) == 0)
-!dir$ assume (mod(NLz, VECTOR_SIZE) == 0)
-# endif
-# define IDX(dt) iz,iy,and(ix+(dt)+NLx,NLx-1)
-# define IDY(dt) iz,and(iy+(dt)+NLy,NLy-1),ix
-# define IDZ(dt) and(iz+(dt)+NLz,NLz-1),iy,ix
-#else
-# define IDX(dt) iz,iy,modx(ix+(dt)+NLx)
-# define IDY(dt) iz,mody(iy+(dt)+NLy),ix
-# define IDZ(dt) modz(iz+(dt)+NLz),iy,ix
-#endif
-
-
-#ifdef ARTED_STENCIL_ENABLE_LOOP_BLOCKING
-  do bx=0,NLx-1,LBX
-  do by=0,NLy-1,LBY
-  do ix=bx,min(bx+LBX-1,NLx-1)
-  do iy=by,min(by+LBY-1,NLy-1)
-#else
-  do ix=0,NLx-1
-  do iy=0,NLy-1
-#endif
-#ifdef __INTEL_COMPILER
-!dir$ simd
-!dir$ vector nontemporal(F,G)
-#endif
-#ifdef __FUJITSU
-!OCL simd
-!OCL noalias
-#endif
-  do iz=0,NLz-1
-#if defined(__KNC__) || defined(__AVX512F__)
-    t(1) = E(IDZ( 1))
-    t(2) = E(IDZ( 2))
-    t(3) = E(IDZ( 3))
-    t(4) = E(IDZ( 4))
-    t(5) = E(IDZ(-1))
-    t(6) = E(IDZ(-2))
-    t(7) = E(IDZ(-3))
-    t(8) = E(IDZ(-4))
-
-    v=(C( 9)*(t(1)+t(5)) &
-    & +C(10)*(t(2)+t(6)) &
-    & +C(11)*(t(3)+t(7)) &
-    & +C(12)*(t(4)+t(8)))
-    w=(D( 9)*(t(1)-t(5)) &
-    & +D(10)*(t(2)-t(6)) &
-    & +D(11)*(t(3)-t(7)) &
-    & +D(12)*(t(4)-t(8)))
-
-    t(1) = E(IDY( 1))
-    t(2) = E(IDY( 2))
-    t(3) = E(IDY( 3))
-    t(4) = E(IDY( 4))
-    t(5) = E(IDY(-1))
-    t(6) = E(IDY(-2))
-    t(7) = E(IDY(-3))
-    t(8) = E(IDY(-4))
-
-    v=(C(5)*(t(1)+t(5)) &
-    & +C(6)*(t(2)+t(6)) &
-    & +C(7)*(t(3)+t(7)) &
-    & +C(8)*(t(4)+t(8))) + v
-    w=(D(5)*(t(1)-t(5)) &
-    & +D(6)*(t(2)-t(6)) &
-    & +D(7)*(t(3)-t(7)) &
-    & +D(8)*(t(4)-t(8))) + w
-
-    t(1) = E(IDX( 1))
-    t(2) = E(IDX( 2))
-    t(3) = E(IDX( 3))
-    t(4) = E(IDX( 4))
-    t(5) = E(IDX(-1))
-    t(6) = E(IDX(-2))
-    t(7) = E(IDX(-3))
-    t(8) = E(IDX(-4))
-
-    v=(C(1)*(t(1)+t(5)) &
-    & +C(2)*(t(2)+t(6)) &
-    & +C(3)*(t(3)+t(7)) &
-    & +C(4)*(t(4)+t(8))) + v
-    w=(D(1)*(t(1)-t(5)) &
-    & +D(2)*(t(2)-t(6)) &
-    & +D(3)*(t(3)-t(7)) &
-    & +D(4)*(t(4)-t(8))) + w
-#else
-    v=(C( 9)*(E(IDZ(1))+E(IDZ(-1))) &
-    & +C(10)*(E(IDZ(2))+E(IDZ(-2))) &
-    & +C(11)*(E(IDZ(3))+E(IDZ(-3))) &
-    & +C(12)*(E(IDZ(4))+E(IDZ(-4))))
-    w=(D( 9)*(E(IDZ(1))-E(IDZ(-1))) &
-    & +D(10)*(E(IDZ(2))-E(IDZ(-2))) &
-    & +D(11)*(E(IDZ(3))-E(IDZ(-3))) &
-    & +D(12)*(E(IDZ(4))-E(IDZ(-4))))
-
-    v=(C( 5)*(E(IDY(1))+E(IDY(-1))) &
-    & +C( 6)*(E(IDY(2))+E(IDY(-2))) &
-    & +C( 7)*(E(IDY(3))+E(IDY(-3))) &
-    & +C( 8)*(E(IDY(4))+E(IDY(-4)))) + v
-    w=(D( 5)*(E(IDY(1))-E(IDY(-1))) &
-    & +D( 6)*(E(IDY(2))-E(IDY(-2))) &
-    & +D( 7)*(E(IDY(3))-E(IDY(-3))) &
-    & +D( 8)*(E(IDY(4))-E(IDY(-4)))) + w
-
-    v=(C( 1)*(E(IDX(1))+E(IDX(-1))) &
-    & +C( 2)*(E(IDX(2))+E(IDX(-2))) &
-    & +C( 3)*(E(IDX(3))+E(IDX(-3))) &
-    & +C( 4)*(E(IDX(4))+E(IDX(-4)))) + v
-    w=(D( 1)*(E(IDX(1))-E(IDX(-1))) &
-    & +D( 2)*(E(IDX(2))-E(IDX(-2))) &
-    & +D( 3)*(E(IDX(3))-E(IDX(-3))) &
-    & +D( 4)*(E(IDX(4))-E(IDX(-4)))) + w
-#endif
-
-     u = A*E(iz,iy,ix) - 0.5d0 * v - zI * w
-
-     F(iz,iy,ix) = u
-     G(iz,iy,ix) = u + B(iz,iy,ix)*E(iz,iy,ix)
-  end do
-  end do
-  end do
-#ifdef ARTED_STENCIL_ENABLE_LOOP_BLOCKING
-  end do
-  end do
-#endif
-end subroutine
diff -uprN ./ARTED/common/preprocessor.f90 ./arted0/common/preprocessor.f90
--- ./ARTED/common/preprocessor.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/common/preprocessor.f90	2017-03-03 05:02:37.000000000 +0900
@@ -33,9 +33,6 @@ subroutine print_optimize_message
 #ifdef ARTED_STENCIL_OPTIMIZED
   print *, '  ARTED_STENCIL_OPTIMIZED'
 #endif
-#ifdef ARTED_STENCIL_WITH_C
-  print *, '  ARTED_STENCIL_WITH_C'
-#endif
 #ifdef ARTED_STENCIL_PADDING
   print *, '  ARTED_STENCIL_PADDING'
 #endif
diff -uprN ./ARTED/configure.py ./arted0/configure.py
--- ./ARTED/configure.py	2017-03-03 04:59:10.000000000 +0900
+++ ./arted0/configure.py	2017-03-03 05:02:37.000000000 +0900
@@ -55,10 +55,8 @@ parser.add_option_group(group)
 
 group = OptionGroup(parser, 'Optimization options')
 group.add_option('--old-stencil',         action='store_false', dest='stencil_optimized', help='use old implementation of the stencil computation code.')
-group.add_option('--stencil-with-c',      action='store_true',  dest='stencil_with_c',    help='use C code of the stencil computation.')
-group.add_option('--stencil-with-f90',    action='store_false', dest='stencil_with_c',    help='use Fortran90 code of the stencil computation.')
-group.add_option('--explicit-vec',        action='store_true',  dest='explicit_vec',      help='enable explicit vectorization in the stencil computation.')
-group.add_option('--compiler-vec',        action='store_false', dest='explicit_vec',      help='defer to compiler vectorization in the stencil computation.')
+group.add_option('--explicit-vec',        action='store_true',  dest='explicit_vec',      help='enable explicit vectorization in the stencil computation with C-lang.')
+group.add_option('--compiler-vec',        action='store_false', dest='explicit_vec',      help='defer to compiler vectorization in the stencil computation with Fortran90.')
 group.add_option('--simd-set',            action='store',       dest='simd',              help='specifies SIMD instruction set. (e.g. AVX, HPC_ACE2...)')
 group.add_option('--enable-swp',          action='store_true',  dest='swp',               help='enable software prefetch in the explicit vec.')
 group.add_option('--disable-swp',         action='store_false', dest='swp',               help='disable software prefetch in the explicit vec.')
@@ -89,7 +87,6 @@ add_option(dict, 'USE_PAPI',            
 add_option(dict, 'USE_NVTX',                   options.nvtx)
 add_option(dict, 'OPT_STENCIL',                options.stencil_optimized)
 add_option(dict, 'OPT_CURRENT',                options.current_optimized)
-add_option(dict, 'STENCIL_WITH_C',             options.stencil_with_c)
 add_option(dict, 'DOMAIN_IS_POW2',             options.domain_two)
 add_option(dict, 'ENABLE_ARRAY_PADDING',       options.padding)
 add_option(dict, 'ENABLE_EXPLICIT_VEC',        options.explicit_vec)
diff -uprN ./ARTED/control/control_ms.f90 ./arted0/control/control_ms.f90
--- ./ARTED/control/control_ms.f90	2017-03-03 04:59:22.000000000 +0900
+++ ./arted0/control/control_ms.f90	2017-03-03 05:02:37.000000000 +0900
@@ -490,7 +488,7 @@ subroutine main
       if(comm_is_root(1))then
         call write_result(index)
         write(940,'(4e26.16E3)')iter*dt,sum(energy_elec)*HX_m*HY_m/aLxyz &
-              &,sum(energy_elemag)*HX_m*HY_m/aLxyz,sum(energy_total)*HX_m*HY_m/aLxyz
+          &,sum(energy_elemag)*HX_m*HY_m/aLxyz,sum(energy_total)*HX_m*HY_m/aLxyz
       end if
     end if
     call timelog_end(LOG_OTHER)
@@ -597,6 +595,7 @@ subroutine main
   if(comm_is_root(2)) then
     close(943)
   end if
+  call comm_finalize
 
 End subroutine Main
 !--------10--------20--------30--------40--------50--------60--------70--------80--------90--------100-------110-------120--------130
diff -uprN ./ARTED/control/control_sc.f90 ./arted0/control/control_sc.f90
--- ./ARTED/control/control_sc.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/control/control_sc.f90	2017-03-03 05:02:18.000000000 +0900
@@ -515,6 +513,7 @@ subroutine main
   if (comm_is_root() ) write(*,*) 'Total time =',(Time_now-Time_start)
 
 1 if(comm_is_root()) write(*,*)  'This calculation is shutdown successfully!'
+  call comm_finalize
 
 end subroutine Main
 !--------10--------20--------30--------40--------50--------60--------70--------80--------90--------100-------110-------120--------130
diff -uprN ./ARTED/main.f90 ./arted0/main.f90
--- ./ARTED/main.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/main.f90	2017-03-03 05:02:37.000000000 +0900
diff -uprN ./ARTED/modules/opt_variables.f90 ./arted0/modules/opt_variables.f90
--- ./ARTED/modules/opt_variables.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/modules/opt_variables.f90	2017-03-03 05:02:37.000000000 +0900
@@ -19,7 +19,7 @@ module opt_variables
   real(8) :: lapt(12)
 
   integer                :: PNLx,PNLy,PNLz,PNL
-  complex(8),allocatable :: ztpsi(:,:,:)
+  complex(8),allocatable :: zhtpsi(:,:,:),zttpsi(:,:)
 
   real(8),allocatable :: zrhotmp(:,:)
 
@@ -62,7 +62,7 @@ module opt_variables
 #endif
 
 !dir$ attributes align:MEM_ALIGNED :: lapt
-!dir$ attributes align:MEM_ALIGNED :: ztpsi
+!dir$ attributes align:MEM_ALIGNED :: zhtpsi,zttpsi
 !dir$ attributes align:MEM_ALIGNED :: zrhotmp
 !dir$ attributes align:MEM_ALIGNED :: zJxyz,zKxyz
 !dir$ attributes align:MEM_ALIGNED :: zcx,zcy,zcz
@@ -108,16 +108,17 @@ contains
     PNL  = PNLx * PNLy * PNLz
 
 #ifndef ARTED_LBLK
-    allocate(ztpsi(0:PNL-1,4,0:NUMBER_THREADS-1))
+    allocate(zhtpsi(0:PNL-1,4,0:NUMBER_THREADS-1))
 #else
     blk_nkb_hpsi = min(at_least_parallelism/PNL + 1, NKB)
-    allocate(ztpsi(0:PNL-1, 0:blk_nkb_hpsi-1, 4))
+    allocate(zhtpsi(0:PNL-1, 0:blk_nkb_hpsi-1, 4))
     !write(*,*) "blk_nkb_hpsi:", blk_nkb_hpsi
 
     !blk_nkb_current = min(at_least_parallelism/PNL + 1, NKB)
     blk_nkb_current = min(at_least_parallelism/(Nlma*128) + 1, NKB)
     !write(*,*) "blk_nkb_current:", blk_nkb_current
 #endif
+    allocate(zttpsi(0:PNL-1,0:NUMBER_THREADS-1))
 
     allocate(zcx(NBoccmax,NK_s:NK_e))
     allocate(zcy(NBoccmax,NK_s:NK_e))
diff -uprN ./ARTED/perfcheck/wrap_variables.f90 ./arted0/perfcheck/wrap_variables.f90
--- ./ARTED/perfcheck/wrap_variables.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/perfcheck/wrap_variables.f90	2017-03-03 05:02:37.000000000 +0900
@@ -81,7 +81,7 @@ contains
     PNLz = NLz
     PNL = PNLx*PNLy*PNLz
 
-    allocate(ztpsi(0:PNL-1,4,0:NUMBER_THREADS-1))
+    allocate(zhtpsi(0:PNL-1,4,0:NUMBER_THREADS-1))
     allocate(zcx(NBoccmax,NK_s:NK_e))
     allocate(zcy(NBoccmax,NK_s:NK_e))
     allocate(zcz(NBoccmax,NK_s:NK_e))
diff -uprN ./ARTED/platform/pgi-openacc.cmake ./arted0/platform/pgi-openacc.cmake
--- ./ARTED/platform/pgi-openacc.cmake	2017-03-03 04:59:10.000000000 +0900
+++ ./arted0/platform/pgi-openacc.cmake	2017-03-03 05:02:37.000000000 +0900
@@ -22,6 +22,7 @@ set(CMAKE_C_FLAGS_RELEASE       "-fastss
 # set(ENABLE_EXPLICIT_VEC        ON)
 # set(ENABLE_REDUCE_FOR_MANYCORE ON)
 
+set(ENABLE_OPENACC        ON)
 set(ENABLE_LARGE_BLOCKING ON)
 
 ########
Binary files ./ARTED/stencil/.DS_Store and ./arted0/stencil/.DS_Store differ
Binary files ./ARTED/stencil/C/.DS_Store and ./arted0/stencil/C/.DS_Store differ
diff -uprN ./ARTED/stencil/C/hpsi.c ./arted0/stencil/C/hpsi.c
--- ./ARTED/stencil/C/hpsi.c	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/stencil/C/hpsi.c	1970-01-01 09:00:00.000000000 +0900
@@ -1,150 +0,0 @@
-/*
- *  Copyright 2016 ARTED developers
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-#include <complex.h>
-#include "./interop.h"
-
-extern int NLx, NLy, NLz;
-extern int PNLx, PNLy, PNLz;
-extern int *modx, *mody, *modz;
-
-#ifdef ARTED_STENCIL_LOOP_BLOCKING
-extern int BX, BY;
-#endif
-
-void hpsi1_rt_stencil_( double         const* restrict A_
-                      , double         const           B[NLx][NLy][NLz]
-                      , double         const* restrict C
-                      , double         const* restrict D
-                      , double complex const           E[restrict PNLx][PNLy][PNLz]
-                      , double complex                 F[restrict PNLx][PNLy][PNLz]
-)
-{
-  const double A = *A_;
-
-  int ix, iy, iz;
-  double complex v, w;
-  double complex t[8];
-
-#ifdef ARTED_STENCIL_LOOP_BLOCKING
-  int bx, by;
-#endif
-
-  __assume_aligned(B, MEM_ALIGNED);
-  __assume_aligned(E, MEM_ALIGNED);
-  __assume_aligned(F, MEM_ALIGNED);
-
-#undef IDX
-#undef IDY
-#undef IDZ
-
-#ifdef ARTED_DOMAIN_POWER_OF_TWO
-# ifdef __INTEL_COMPILER
-  __assume(NLx % VECTOR_SIZE == 0);
-  __assume(NLy % VECTOR_SIZE == 0);
-  __assume(NLz % VECTOR_SIZE == 0);
-# endif
-# define IDX(dt) (ix+(dt)+NLx)&(NLx-1)][iy][iz
-# define IDY(dt) ix][(iy+(dt)+NLy)&(NLy-1)][iz
-# define IDZ(dt) ix][iy][(iz+(dt)+NLz)&(NLz-1)
-#else
-# define IDX(dt) modx[ix+(dt)+NLx]][iy][iz
-# define IDY(dt) ix][mody[iy+(dt)+NLy]][iz
-# define IDZ(dt) ix][iy][modz[iz+(dt)+NLz]
-#endif
-
-#ifdef ARTED_STENCIL_LOOP_BLOCKING
-  for(bx = 0 ; bx < NLx ; bx += BX)
-  for(by = 0 ; by < NLy ; by += BY)
-  for(ix = bx ; ix < MIN(bx+BX,NLx) ; ++ix)
-  for(iy = by ; iy < MIN(by+BY,NLy) ; ++iy)
-#else
-  for(ix = 0 ; ix < NLx ; ++ix)
-  for(iy = 0 ; iy < NLy ; ++iy)
-#endif
-  {
-#pragma simd
-#pragma vector nontemporal(F)
-    for(iz = 0 ; iz < NLz ; ++iz)
-    {
-      __assume_aligned(&B[ix][iy][0], MEM_ALIGNED);
-      __assume_aligned(&E[ix][iy][0], MEM_ALIGNED);
-      __assume_aligned(&F[ix][iy][0], MEM_ALIGNED);
-
-      /* z-dimension (unit stride) */
-      {
-        t[0] = E[IDZ( 1)];
-        t[1] = E[IDZ( 2)];
-        t[2] = E[IDZ( 3)];
-        t[3] = E[IDZ( 4)];
-        t[4] = E[IDZ(-1)];
-        t[5] = E[IDZ(-2)];
-        t[6] = E[IDZ(-3)];
-        t[7] = E[IDZ(-4)];
-
-        v = (C[ 8] * (t[0] + t[4])
-            +C[ 9] * (t[1] + t[5])
-            +C[10] * (t[2] + t[6])
-            +C[11] * (t[3] + t[7]));
-        w = (D[ 8] * (t[0] - t[4])
-            +D[ 9] * (t[1] - t[5])
-            +D[10] * (t[2] - t[6])
-            +D[11] * (t[3] - t[7]));
-      }
-      /* y-dimension (NLz stride) */
-      {
-        t[0] = E[IDY( 1)];
-        t[1] = E[IDY( 2)];
-        t[2] = E[IDY( 3)];
-        t[3] = E[IDY( 4)];
-        t[4] = E[IDY(-1)];
-        t[5] = E[IDY(-2)];
-        t[6] = E[IDY(-3)];
-        t[7] = E[IDY(-4)];
-
-        v += (C[ 4] * (t[0] + t[4])
-             +C[ 5] * (t[1] + t[5])
-             +C[ 6] * (t[2] + t[6])
-             +C[ 7] * (t[3] + t[7]));
-        w += (D[ 4] * (t[0] - t[4])
-             +D[ 5] * (t[1] - t[5])
-             +D[ 6] * (t[2] - t[6])
-             +D[ 7] * (t[3] - t[7]));
-      }
-      /* x-dimension (NLy*NLz stride)  */
-      {
-        t[0] = E[IDX( 1)];
-        t[1] = E[IDX( 2)];
-        t[2] = E[IDX( 3)];
-        t[3] = E[IDX( 4)];
-        t[4] = E[IDX(-1)];
-        t[5] = E[IDX(-2)];
-        t[6] = E[IDX(-3)];
-        t[7] = E[IDX(-4)];
-
-        v += (C[ 0] * (t[0] + t[4])
-             +C[ 1] * (t[1] + t[5])
-             +C[ 2] * (t[2] + t[6])
-             +C[ 3] * (t[3] + t[7]));
-        w += (D[ 0] * (t[0] - t[4])
-             +D[ 1] * (t[1] - t[5])
-             +D[ 2] * (t[2] - t[6])
-             +D[ 3] * (t[3] - t[7]));
-      }
-
-      F[ix][iy][iz] = B[ix][iy][iz] * E[ix][iy][iz] + A * E[ix][iy][iz] - 0.5 * v - _Complex_I * w;
-    }
-  }
-}
diff -uprN ./ARTED/stencil/CMakeLists.txt ./arted0/stencil/CMakeLists.txt
--- ./ARTED/stencil/CMakeLists.txt	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/stencil/CMakeLists.txt	2017-03-03 05:02:37.000000000 +0900
@@ -3,49 +3,48 @@
 ###
 
 ### Soruces for current and total_energy
-set(SOURCES_COMPILER_VEC
-    F90/current.f90
-    F90/total_energy.f90
-    )
 set(SOURCES_EXPLICIT_VEC
     C/${SIMD_SET}/current.c
     C/${SIMD_SET}/total_energy.c
     )
-
-### Sources for hpsi
-set(SOURCE_HPSI_ORIGINAL
-    F90/hpsi_original.f90
-    )
-set(SOURCE_HPSI_F90_COMPILER_VEC
-    F90/hpsi.f90
-    )
-set(SOURCE_HPSI_C_COMPILER_VEC
-    C/hpsi.c
+set(SOURCES_COMPILER_VEC
+    F90/total_energy.f90
+    F90/current.f90
     )
-set(SOURCE_HPSI_EXPLICIT_VEC
-    C/${SIMD_SET}/hpsi.c
+set(SOURCES_ACC
+    F90/acc/current.f90
+    F90/acc/hpsi.f90
     )
 
 
-###
+### Sources for hpsi
+set(SOURCE_HPSI_EXPLICIT_VEC   C/${SIMD_SET}/hpsi.c)
+set(SOURCE_HPSI_COMPILER_VEC   F90/hpsi.f90)
+set(SOURCE_HPSI_ORIGINAL       F90/hpsi_original.f90)
+
+if (ENABLE_EXPLICIT_VEC)
+  set(SOURCE_HPSI ${SOURCE_HPSI_EXPLICIT_VEC})
+else ()
+  set(SOURCE_HPSI ${SOURCE_HPSI_COMPILER_VEC})
+endif ()
+
 if (OPT_STENCIL)
-  if (STENCIL_WITH_C)
-    if (ENABLE_EXPLICIT_VEC)
-      set(SOURCES ${SOURCE_HPSI_EXPLICIT_VEC})
-    else ()
-      set(SOURCES ${SOURCE_HPSI_C_COMPILER_VEC})
-    endif ()
-  else ()
-    set(SOURCES ${SOURCE_HPSI_F90_COMPILER_VEC})
-  endif ()
 else ()
-  set(SOURCES ${SOURCE_HPSI_ORIGINAL})
+  set(SOURCE_HPSI ${SOURCE_HPSI_ORIGINAL})
 endif ()
 
+
+###
 if (ENABLE_EXPLICIT_VEC)
-  set(SOURCES ${SOURCES} ${SOURCES_EXPLICIT_VEC})
+  set(SOURCES_OMP ${SOURCE_HPSI} ${SOURCES_EXPLICIT_VEC})
+else ()
+  set(SOURCES_OMP ${SOURCE_HPSI} ${SOURCES_COMPILER_VEC})
+endif ()
+
+if (ENABLE_OPENACC)
+  set(SOURCES ${SOURCES_ACC} ${SOURCE_HPSI_COMPILER_VEC} ${SOURCES_COMPILER_VEC})
 else ()
-  set(SOURCES ${SOURCES} ${SOURCES_COMPILER_VEC})
+  set(SOURCES ${SOURCES_OMP})
 endif ()
 
 add_library(${STENCIL_LIB} STATIC ${SOURCES})
diff -uprN ./ARTED/stencil/F90/acc/current.f90 ./arted0/stencil/F90/acc/current.f90
--- ./ARTED/stencil/F90/acc/current.f90	1970-01-01 09:00:00.000000000 +0900
+++ ./arted0/stencil/F90/acc/current.f90	2017-03-03 05:02:37.000000000 +0900
@@ -0,0 +1,101 @@
+!
+!  Copyright 2016 ARTED developers
+!
+!  Licensed under the Apache License, Version 2.0 (the "License");
+!  you may not use this file except in compliance with the License.
+!  You may obtain a copy of the License at
+!
+!      http://www.apache.org/licenses/LICENSE-2.0
+!
+!  Unless required by applicable law or agreed to in writing, software
+!  distributed under the License is distributed on an "AS IS" BASIS,
+!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+!  See the License for the specific language governing permissions and
+!  limitations under the License.
+!
+subroutine current_stencil_LBLK(E, ikb_s,ikb_e)
+  use global_variables, only: ik_table,ib_table,NBoccmax,NK_s,NK_e,NLx,NLy,NLz, &
+  &                           nabx,naby,nabz,zI
+  use opt_variables
+  implicit none
+  complex(8), intent(in)  :: E(0:NLz-1,0:NLy-1,0:NLx-1, NBoccmax, NK_s:NK_e)
+  integer :: ikb_s,ikb_e
+
+  real(8)    :: F,G,H
+  integer    :: ix,iy,iz
+  complex(8) :: v,w
+  integer    :: ikb,ik,ib
+
+#undef IDX
+#undef IDY
+#undef IDZ
+#ifdef ARTED_DOMAIN_POWER_OF_TWO
+# define IDX(dt) iz,iy,and(ix+(dt)+NLx,NLx-1),ib,ik
+# define IDY(dt) iz,and(iy+(dt)+NLy,NLy-1),ix,ib,ik
+# define IDZ(dt) and(iz+(dt)+NLz,NLz-1),iy,ix,ib,ik
+#else
+# define IDX(dt) iz,iy,modx(ix+(dt)+NLx),ib,ik
+# define IDY(dt) iz,mody(iy+(dt)+NLy),ix,ib,ik
+# define IDZ(dt) modz(iz+(dt)+NLz),iy,ix,ib,ik
+#endif
+
+!$acc kernels pcopy(zcx,zcy,zcz) &
+#ifndef ARTED_DOMAIN_POWER_OF_TWO
+!$acc pcopyin(modx,mody,modz) &
+#endif
+!$acc pcopyin(E,ib_table,ik_table,nabx,naby,nabz)
+!$acc loop independent gang private(H,G,F)
+  do ikb=ikb_s,ikb_e
+    ik=ik_table(ikb)
+    ib=ib_table(ikb)
+
+    F = 0
+!$acc loop collapse(3) vector(128) reduction(+:F)
+    do iy=0,NLy-1
+    do ix=0,NLx-1
+    do iz=0,NLz-1
+      w = conjg(E(iz,iy,ix, ib,ik))
+      v=(nabx(1)*(E(IDX(1))) &
+      & +nabx(2)*(E(IDX(2))) &
+      & +nabx(3)*(E(IDX(3))) &
+      & +nabx(4)*(E(IDX(4))))
+      F = F + imag(w * v)
+    end do
+    end do
+    end do
+    zcx(ib,ik)=F * 2.d0
+
+    G = 0
+!$acc loop collapse(3) vector(128) reduction(+:G)
+    do ix=0,NLx-1
+    do iy=0,NLy-1
+    do iz=0,NLz-1
+      w = conjg(E(iz,iy,ix, ib,ik))
+      v=(naby(1)*(E(IDY(1))) &
+      & +naby(2)*(E(IDY(2))) &
+      & +naby(3)*(E(IDY(3))) &
+      & +naby(4)*(E(IDY(4))))
+      G = G + imag(w * v)
+    end do
+    end do
+    end do
+    zcy(ib,ik)=G * 2.d0
+
+    H = 0
+!$acc loop collapse(3) vector(128) reduction(+:H)
+    do ix=0,NLx-1
+    do iy=0,NLy-1
+    do iz=0,NLz-1
+      w = conjg(E(iz,iy,ix, ib,ik))
+      v=(nabz(1)*(E(IDZ(1))) &
+      & +nabz(2)*(E(IDZ(2))) &
+      & +nabz(3)*(E(IDZ(3))) &
+      & +nabz(4)*(E(IDZ(4))))
+      H = H + imag(w * v)
+    end do
+    end do
+    end do
+    zcz(ib,ik)=H * 2.d0
+  end do
+!$acc end kernels
+end subroutine
diff -uprN ./ARTED/stencil/F90/acc/hpsi.f90 ./arted0/stencil/F90/acc/hpsi.f90
--- ./ARTED/stencil/F90/acc/hpsi.f90	1970-01-01 09:00:00.000000000 +0900
+++ ./arted0/stencil/F90/acc/hpsi.f90	2017-03-03 05:02:37.000000000 +0900
@@ -0,0 +1,90 @@
+!
+!  Copyright 2016 ARTED developers
+!
+!  Licensed under the Apache License, Version 2.0 (the "License");
+!  you may not use this file except in compliance with the License.
+!  You may obtain a copy of the License at
+!
+!      http://www.apache.org/licenses/LICENSE-2.0
+!
+!  Unless required by applicable law or agreed to in writing, software
+!  distributed under the License is distributed on an "AS IS" BASIS,
+!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+!  See the License for the specific language governing permissions and
+!  limitations under the License.
+!
+subroutine hpsi1_RT_stencil_LBLK(A,B,C,D,E,F, ikb_s,ikb_e)
+  use global_variables, only: NLx,NLy,NLz,zI
+#ifndef ARTED_DOMAIN_POWER_OF_TWO
+  use opt_variables, only: modx, mody, modz
+#endif
+  use opt_variables, only: PNLx,PNLy,PNLz
+  implicit none
+  integer :: ikb_s,ikb_e
+  real(8),   intent(in)  :: A(ikb_s:ikb_e)
+  real(8),   intent(in)  :: B(0:NLz-1,0:NLy-1,0:NLx-1)
+  real(8),   intent(in)  :: C(12)
+  real(8),   intent(in)  :: D(12, ikb_s:ikb_e)
+  complex(8),intent(in)  :: E(0:PNLz-1,0:PNLy-1,0:PNLx-1, ikb_s:ikb_e)
+  complex(8),intent(out) :: F(0:PNLz-1,0:PNLy-1,0:PNLx-1, ikb_s:ikb_e)
+
+  integer    :: ikb, ix,iy,iz
+  complex(8) :: v, w
+
+#ifdef ARTED_DOMAIN_POWER_OF_TWO
+# define IDX(dt) iz,iy,and(ix+(dt)+NLx,NLx-1),ikb
+# define IDY(dt) iz,and(iy+(dt)+NLy,NLy-1),ix,ikb
+# define IDZ(dt) and(iz+(dt)+NLz,NLz-1),iy,ix,ikb
+#else
+# define IDX(dt) iz,iy,modx(ix+(dt)+NLx),ikb
+# define IDY(dt) iz,mody(iy+(dt)+NLy),ix,ikb
+# define IDZ(dt) modz(iz+(dt)+NLz),iy,ix,ikb
+#endif
+
+!$acc kernels pcopy(F) &
+#ifndef ARTED_DOMAIN_POWER_OF_TWO
+!$acc& pcopyin(modx,mody,modz) &
+#endif
+!$acc& pcopyin(A,B,C,D,E)
+!$acc loop gang vector(1)
+  do ikb = ikb_s, ikb_e
+!$acc loop collapse(2) independent gang vector(128)
+    do iy=0,NLy-1
+    do iz=0,NLz-1
+!$acc loop seq
+    do ix=0,NLx-1
+      v=(C( 9)    *(E(IDZ(1))+E(IDZ(-1))) &
+      & +C(10)    *(E(IDZ(2))+E(IDZ(-2))) &
+      & +C(11)    *(E(IDZ(3))+E(IDZ(-3))) &
+      & +C(12)    *(E(IDZ(4))+E(IDZ(-4))))
+      w=(D( 9,ikb)*(E(IDZ(1))-E(IDZ(-1))) &
+      & +D(10,ikb)*(E(IDZ(2))-E(IDZ(-2))) &
+      & +D(11,ikb)*(E(IDZ(3))-E(IDZ(-3))) &
+      & +D(12,ikb)*(E(IDZ(4))-E(IDZ(-4))))
+  
+      v=(C( 5)    *(E(IDY(1))+E(IDY(-1))) &
+      & +C( 6)    *(E(IDY(2))+E(IDY(-2))) &
+      & +C( 7)    *(E(IDY(3))+E(IDY(-3))) &
+      & +C( 8)    *(E(IDY(4))+E(IDY(-4)))) + v
+      w=(D( 5,ikb)*(E(IDY(1))-E(IDY(-1))) &
+      & +D( 6,ikb)*(E(IDY(2))-E(IDY(-2))) &
+      & +D( 7,ikb)*(E(IDY(3))-E(IDY(-3))) &
+      & +D( 8,ikb)*(E(IDY(4))-E(IDY(-4)))) + w
+  
+      v=(C( 1)    *(E(IDX(1))+E(IDX(-1))) &
+      & +C( 2)    *(E(IDX(2))+E(IDX(-2))) &
+      & +C( 3)    *(E(IDX(3))+E(IDX(-3))) &
+      & +C( 4)    *(E(IDX(4))+E(IDX(-4)))) + v
+      w=(D( 1,ikb)*(E(IDX(1))-E(IDX(-1))) &
+      & +D( 2,ikb)*(E(IDX(2))-E(IDX(-2))) &
+      & +D( 3,ikb)*(E(IDX(3))-E(IDX(-3))) &
+      & +D( 4,ikb)*(E(IDX(4))-E(IDX(-4)))) + w
+  
+      F(iz,iy,ix, ikb) = (A(ikb)+B(iz,iy,ix))*E(iz,iy,ix, ikb) &
+        - 0.5d0 * v - zI * w
+    end do
+    end do
+    end do
+  end do
+!$acc end kernels
+end subroutine
diff -uprN ./ARTED/stencil/F90/current.f90 ./arted0/stencil/F90/current.f90
--- ./ARTED/stencil/F90/current.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/stencil/F90/current.f90	2017-03-03 05:02:37.000000000 +0900
@@ -113,92 +113,3 @@ subroutine current_stencil(C,E,F,G,H)
   G = G * 2.0d0
   F = F * 2.0d0
 end subroutine
-
-#ifdef ARTED_LBLK
-subroutine current_stencil_LBLK(E, ikb_s,ikb_e)
-  use global_variables, only: ik_table,ib_table,NBoccmax,NK_s,NK_e,NLx,NLy,NLz, &
-  &                           nabx,naby,nabz,zI
-  use opt_variables
-  implicit none
-  complex(8), intent(in)  :: E(0:NLz-1,0:NLy-1,0:NLx-1, NBoccmax, NK_s:NK_e)
-  integer :: ikb_s,ikb_e
-
-  real(8)    :: F,G,H
-  integer    :: ix,iy,iz
-  complex(8) :: v,w
-  integer    :: ikb,ik,ib
-
-#undef IDX
-#undef IDY
-#undef IDZ
-#ifdef ARTED_DOMAIN_POWER_OF_TWO
-# define IDX(dt) iz,iy,and(ix+(dt)+NLx,NLx-1),ib,ik
-# define IDY(dt) iz,and(iy+(dt)+NLy,NLy-1),ix,ib,ik
-# define IDZ(dt) and(iz+(dt)+NLz,NLz-1),iy,ix,ib,ik
-#else
-# define IDX(dt) iz,iy,modx(ix+(dt)+NLx),ib,ik
-# define IDY(dt) iz,mody(iy+(dt)+NLy),ix,ib,ik
-# define IDZ(dt) modz(iz+(dt)+NLz),iy,ix,ib,ik
-#endif
-
-!$acc kernels pcopy(zcx,zcy,zcz) &
-#ifndef ARTED_DOMAIN_POWER_OF_TWO
-!$acc pcopyin(modx,mody,modz) &
-#endif
-!$acc pcopyin(E,ib_table,ik_table,nabx,naby,nabz)
-!$acc loop independent gang private(H,G,F)
-  do ikb=ikb_s,ikb_e
-    ik=ik_table(ikb)
-    ib=ib_table(ikb)
-
-    F = 0
-!$acc loop collapse(3) vector(128) reduction(+:F)
-    do iy=0,NLy-1
-    do ix=0,NLx-1
-    do iz=0,NLz-1
-      w = conjg(E(iz,iy,ix, ib,ik))
-      v=(nabx(1)*(E(IDX(1))) &
-      & +nabx(2)*(E(IDX(2))) &
-      & +nabx(3)*(E(IDX(3))) &
-      & +nabx(4)*(E(IDX(4))))
-      F = F + imag(w * v)
-    end do
-    end do
-    end do
-    zcx(ib,ik)=F * 2.d0
-
-    G = 0
-!$acc loop collapse(3) vector(128) reduction(+:G)
-    do ix=0,NLx-1
-    do iy=0,NLy-1
-    do iz=0,NLz-1
-      w = conjg(E(iz,iy,ix, ib,ik))
-      v=(naby(1)*(E(IDY(1))) &
-      & +naby(2)*(E(IDY(2))) &
-      & +naby(3)*(E(IDY(3))) &
-      & +naby(4)*(E(IDY(4))))
-      G = G + imag(w * v)
-    end do
-    end do
-    end do
-    zcy(ib,ik)=G * 2.d0
-
-    H = 0
-!$acc loop collapse(3) vector(128) reduction(+:H)
-    do ix=0,NLx-1
-    do iy=0,NLy-1
-    do iz=0,NLz-1
-      w = conjg(E(iz,iy,ix, ib,ik))
-      v=(nabz(1)*(E(IDZ(1))) &
-      & +nabz(2)*(E(IDZ(2))) &
-      & +nabz(3)*(E(IDZ(3))) &
-      & +nabz(4)*(E(IDZ(4))))
-      H = H + imag(w * v)
-    end do
-    end do
-    end do
-    zcz(ib,ik)=H * 2.d0
-  end do
-!$acc end kernels
-end subroutine
-#endif
diff -uprN ./ARTED/stencil/F90/hpsi.f90 ./arted0/stencil/F90/hpsi.f90
--- ./ARTED/stencil/F90/hpsi.f90	2017-03-01 05:50:05.000000000 +0900
+++ ./arted0/stencil/F90/hpsi.f90	2017-03-03 05:02:37.000000000 +0900
@@ -191,85 +191,3 @@ subroutine hpsi1_RT_stencil(A,B,C,D,E,F)
   end do
 #endif
 end subroutine
-
-
-#ifdef ARTED_LBLK
-subroutine hpsi1_RT_stencil_LBLK(A,B,C,D,E,F, ikb_s,ikb_e)
-  use global_variables, only: NLx,NLy,NLz,zI
-#ifndef ARTED_DOMAIN_POWER_OF_TWO
-  use opt_variables, only: modx, mody, modz
-#endif
-  use opt_variables, only: PNLx,PNLy,PNLz
-  implicit none
-  integer :: ikb_s,ikb_e
-  real(8),   intent(in)  :: A(ikb_s:ikb_e)
-  real(8),   intent(in)  :: B(0:NLz-1,0:NLy-1,0:NLx-1)
-  real(8),   intent(in)  :: C(12)
-  real(8),   intent(in)  :: D(12, ikb_s:ikb_e)
-  complex(8),intent(in)  :: E(0:PNLz-1,0:PNLy-1,0:PNLx-1, ikb_s:ikb_e)
-  complex(8),intent(out) :: F(0:PNLz-1,0:PNLy-1,0:PNLx-1, ikb_s:ikb_e)
-
-  integer    :: ikb, ix,iy,iz
-  complex(8) :: v, w
-
-#undef IDX
-#undef IDY
-#undef IDZ
-#ifdef ARTED_DOMAIN_POWER_OF_TWO
-# define IDX(dt) iz,iy,and(ix+(dt)+NLx,NLx-1),ikb
-# define IDY(dt) iz,and(iy+(dt)+NLy,NLy-1),ix,ikb
-# define IDZ(dt) and(iz+(dt)+NLz,NLz-1),iy,ix,ikb
-#else
-# define IDX(dt) iz,iy,modx(ix+(dt)+NLx),ikb
-# define IDY(dt) iz,mody(iy+(dt)+NLy),ix,ikb
-# define IDZ(dt) modz(iz+(dt)+NLz),iy,ix,ikb
-#endif
-
-!$acc kernels pcopy(F) &
-#ifndef ARTED_DOMAIN_POWER_OF_TWO
-!$acc& pcopyin(modx,mody,modz) &
-#endif
-!$acc& pcopyin(A,B,C,D,E)
-!$acc loop gang vector(1)
-  do ikb = ikb_s, ikb_e
-!$acc loop collapse(2) independent gang vector(128)
-    do iy=0,NLy-1
-    do iz=0,NLz-1
-!$acc loop seq
-    do ix=0,NLx-1
-      v=(C( 9)    *(E(IDZ(1))+E(IDZ(-1))) &
-      & +C(10)    *(E(IDZ(2))+E(IDZ(-2))) &
-      & +C(11)    *(E(IDZ(3))+E(IDZ(-3))) &
-      & +C(12)    *(E(IDZ(4))+E(IDZ(-4))))
-      w=(D( 9,ikb)*(E(IDZ(1))-E(IDZ(-1))) &
-      & +D(10,ikb)*(E(IDZ(2))-E(IDZ(-2))) &
-      & +D(11,ikb)*(E(IDZ(3))-E(IDZ(-3))) &
-      & +D(12,ikb)*(E(IDZ(4))-E(IDZ(-4))))
-  
-      v=(C( 5)    *(E(IDY(1))+E(IDY(-1))) &
-      & +C( 6)    *(E(IDY(2))+E(IDY(-2))) &
-      & +C( 7)    *(E(IDY(3))+E(IDY(-3))) &
-      & +C( 8)    *(E(IDY(4))+E(IDY(-4)))) + v
-      w=(D( 5,ikb)*(E(IDY(1))-E(IDY(-1))) &
-      & +D( 6,ikb)*(E(IDY(2))-E(IDY(-2))) &
-      & +D( 7,ikb)*(E(IDY(3))-E(IDY(-3))) &
-      & +D( 8,ikb)*(E(IDY(4))-E(IDY(-4)))) + w
-  
-      v=(C( 1)    *(E(IDX(1))+E(IDX(-1))) &
-      & +C( 2)    *(E(IDX(2))+E(IDX(-2))) &
-      & +C( 3)    *(E(IDX(3))+E(IDX(-3))) &
-      & +C( 4)    *(E(IDX(4))+E(IDX(-4)))) + v
-      w=(D( 1,ikb)*(E(IDX(1))-E(IDX(-1))) &
-      & +D( 2,ikb)*(E(IDX(2))-E(IDX(-2))) &
-      & +D( 3,ikb)*(E(IDX(3))-E(IDX(-3))) &
-      & +D( 4,ikb)*(E(IDX(4))-E(IDX(-4)))) + w
-  
-      F(iz,iy,ix, ikb) = (A(ikb)+B(iz,iy,ix))*E(iz,iy,ix, ikb) &
-        - 0.5d0 * v - zI * w
-    end do
-    end do
-    end do
-  end do
-!$acc end kernels
-end subroutine
-#endif ! ARTED_LBLK
