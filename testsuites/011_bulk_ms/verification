#!/usr/bin/env python

# This verification script file is automatically executed after the SALMON.
# If necessary, this script file can used for the verification of the result.
# The script MUST indicate a "return-code 0", if the calculation is successful.
# If a negative value is returned, it is treated as a test failure.

import numpy as np
import sys

print("#" * 60)
print("# Verification start")

return_code = 0

###############################################################################
# Check of Ac field
output = np.loadtxt("multiscale/RT_Ac/Si_Ac_000200.data")[2001]

reference = np.array([
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    6.77753437e-10,  -1.22124829e-09,  -5.81807885e-05,
    8.43941922e-11,   3.85063684e-10,   2.09441220e-05,
    0.00000000e+00,  -4.01759658e-05,  -2.77705523e-10,
    1.50294427e-11,   2.31384734e-12,  -1.30128280e-06,
    -8.30721412e-08,   4.21811379e-08,   8.82147779e-08
])

checklist = {
    "Ac_z": [output[6 - 1], reference[6 - 1], 1e-7],
    "E_z": [output[9 - 1], reference[9 - 1], 1e-7],
    "Jm_z": [output[15 - 1], reference[15 - 1], 1e-8],
    "Eex": [output[16 - 1], reference[16 - 1], 1e-10],
    "Eabs": [output[17 - 1], reference[17 - 1], 1e-10],
    "Eemf": [output[18 - 1], reference[18 - 1], 1e-10],
}

for tag, [val, ref, eps] in checklist.items():
    if np.abs(val - ref) > eps:
        return_code = -1
        flag, msg = ">", "FAILURE"
    else:
        flag, msg ="<=", "SUCCESS"
    print("{TAG:10s} |{VAL:e}{SREF:+e}|{FLAG}{EPS:e} {MSG}".format(
        TAG=tag, VAL=val, SREF=-ref, EPS=eps, FLAG=flag, MSG=msg
    ))

print("# Verification end")
print("#" * 60)

sys.exit(0)  # Success
