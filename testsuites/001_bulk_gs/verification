#!/usr/bin/env python

# This verification script file is automatically executed after the SALMON.
# If necessary, this script file can used for the verification of the result.
# The script MUST indicate a "return-code 0", if the calculation is successful.
# If a negative value is returned, it is treated as a test failure.

import sys
import os
import numpy as np

# test rule
reference = {}

reference['Si_k.data'] = [
    # Row, Col, Reference, Tolerance, Info
    [1-1, 2-1, -0.37500, 1e-4, 'kx ik=1'],
    [1-1, 3-1, -0.37500, 0.00001, 'ky ik=1'],
    [1-1, 4-1, -0.37500, 0.00001, 'kz ik=1'],
    [1-1, 5-1, +1.00000, 0.00001, 'kw ik=1'],
    [2-1, 2-1, -0.37500, 0.00001, 'kx ik=2'],
    [2-1, 3-1, -0.37500, 0.00001, 'ky ik=2'],
    [2-1, 4-1, -0.12500, 0.00001, 'kz ik=2'],
    [2-1, 5-1, +1.00000, 0.00001, 'kw ik=2'],
]

reference['Si_eigen.data'] = [
    # Row, Col, Reference, Tolerance, Info
    [14, 3-1, +1.2341e-01, 1e-03, 'Eigenenergy ik=1 ib=15'],
    [15, 3-1, +1.4209e-01, 1e-03, 'Eigenenergy ik=1 ib=16'],
    [16, 3-1, +1.4189e-01, 1e-03, 'Eigenenergy ik=1 ib=17'],
    [17, 3-1, +1.4903e-01, 1e-03, 'Eigenenergy ik=1 ib=18'],
    [14, 4-1, +2.0000e+00, 1e-05, 'Occupation ik=1 ib=15'],
    [15, 4-1, +2.0000e+00, 1e-05, 'Occupation ik=1 ib=16'],
    [16, 4-1, +0.0000e+00, 1e-05, 'Occupation ik=1 ib=17'],
    [17, 4-1, +0.0000e+00, 1e-05, 'Occupation ik=1 ib=18'],
    [2030, 3-1, +1.2341e-01, 1e-03, 'Eigenenergy ik=64 ib=15'],
    [2031, 3-1, +1.4209e-01, 1e-03, 'Eigenenergy ik=64 ib=16'],
    [2032, 3-1, +1.4189e-01, 1e-03, 'Eigenenergy ik=64 ib=17'],
    [2033, 3-1, +1.4903e-01, 1e-03, 'Eigenenergy ik=64 ib=18'],
    [2030, 4-1, +2.0000e+00, 1e-05, 'Occupation ik=64 ib=15'],
    [2031, 4-1, +2.0000e+00, 1e-05, 'Occupation ik=64 ib=16'],
    [2032, 4-1, +0.0000e+00, 1e-05, 'Occupation ik=64 ib=17'],
    [2033, 4-1, +0.0000e+00, 1e-05, 'Occupation ik=64 ib=18'],
]























message = """[{STATUS}] {INFO}
    {ITEM}[{I:d},{J:d}]: {VAL:+.18e} (ref: {REF:+.4e})
    err: {ERR:1.4e} {CMP} tol: {TOL:1.4e}"""

def main():
    print("#" * 60)
    print("# Verification start")

    return_code = 0

    for item, table in reference.items():
        if os.path.isfile(item):
            data = np.loadtxt(item)
            for i, j, ref, tol, info in table:
                err = np.abs(data[i, j] - ref)
                if err <= tol:
                    status, cmp = 'Success', '<='
                else:
                    status, cmp = 'Failure', '>'
                    return_code = -1
                    
                print(message.format(
                    STATUS=status, INFO=info, ITEM=item, I=i, J=j, VAL=data[i, j],
                    REF=ref, ERR=err, CMP=cmp, TOL=tol
                ))
        else:
            print('[Error] "%s" is not found' % item)
            return_code = -1

    print("# Verification end")
    print("#" * 60)

    sys.exit(return_code)


if __name__ == "__main__":
    main()
